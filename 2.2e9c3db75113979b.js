(self.webpackChunkasct=self.webpackChunkasct||[]).push([[2],{473:function(te,U){var Y;void 0!==(Y=function(){"use strict";function G(y,w,A){var D=new XMLHttpRequest;D.open("GET",y),D.responseType="blob",D.onload=function(){M(D.response,w,A)},D.onerror=function(){console.error("could not download file")},D.send()}function _(y){var w=new XMLHttpRequest;w.open("HEAD",y,!1);try{w.send()}catch(A){}return 200<=w.status&&299>=w.status}function P(y){try{y.dispatchEvent(new MouseEvent("click"))}catch(A){var w=document.createEvent("MouseEvents");w.initMouseEvent("click",!0,!0,window,0,0,0,80,20,!1,!1,!1,!1,0,null),y.dispatchEvent(w)}}var E="object"==typeof window&&window.window===window?window:"object"==typeof self&&self.self===self?self:"object"==typeof global&&global.global===global?global:void 0,u=E.navigator&&/Macintosh/.test(navigator.userAgent)&&/AppleWebKit/.test(navigator.userAgent)&&!/Safari/.test(navigator.userAgent),M=E.saveAs||("object"!=typeof window||window!==E?function(){}:"download"in HTMLAnchorElement.prototype&&!u?function(y,w,A){var D=E.URL||E.webkitURL,x=document.createElement("a");x.download=w=w||y.name||"download",x.rel="noopener","string"==typeof y?(x.href=y,x.origin===location.origin?P(x):_(x.href)?G(y,w,A):P(x,x.target="_blank")):(x.href=D.createObjectURL(y),setTimeout(function(){D.revokeObjectURL(x.href)},4e4),setTimeout(function(){P(x)},0))}:"msSaveOrOpenBlob"in navigator?function(y,w,A){if(w=w||y.name||"download","string"!=typeof y)navigator.msSaveOrOpenBlob(function(y,w){return void 0===w?w={autoBom:!1}:"object"!=typeof w&&(console.warn("Deprecated: Expected third argument to be a object"),w={autoBom:!w}),w.autoBom&&/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(y.type)?new Blob(["\ufeff",y],{type:y.type}):y}(y,A),w);else if(_(y))G(y,w,A);else{var D=document.createElement("a");D.href=y,D.target="_blank",setTimeout(function(){P(D)})}}:function(y,w,A,D){if((D=D||open("","_blank"))&&(D.document.title=D.document.body.innerText="downloading..."),"string"==typeof y)return G(y,w,A);var x="application/octet-stream"===y.type,R=/constructor/i.test(E.HTMLElement)||E.safari,q=/CriOS\/[\d]+/.test(navigator.userAgent);if((q||x&&R||u)&&"undefined"!=typeof FileReader){var H=new FileReader;H.onloadend=function(){var V=H.result;V=q?V:V.replace(/^data:[^;]*;/,"data:attachment/file;"),D?D.location.href=V:location=V,D=null},H.readAsDataURL(y)}else{var K=E.URL||E.webkitURL,W=K.createObjectURL(y);D?D.location=W:location.href=W,D=null,setTimeout(function(){K.revokeObjectURL(W)},4e4)}});E.saveAs=M.saveAs=M,te.exports=M}.apply(U,[]))&&(te.exports=Y)},2:(te,U,B)=>{"use strict";B.r(U),B.d(U,{GraphController:()=>pt});var z=B(239);class Y{constructor(){this.initialize()}initialize(){this.withDrawingDIV=document.getElementById("drawing").offsetWidth,this.heightDrawingDIV=document.getElementById("drawing").offsetHeight,this.totalWidth=this.withDrawingDIV-.05*this.withDrawingDIV,this.vertexSize=Math.sqrt(window.screen.height*window.screen.height+window.screen.width*window.screen.width)/2,this.rootExplorationVertexSize=1.5*this.vertexSize,this.maxContainmentCollapsedVertexSize=2*this.vertexSize,this.vertexLabelSize=14,this.offsetIncrementTwoLines=2.25*Math.sqrt(this.vertexSize),this.offsetIncrementOneLine=1.75*Math.sqrt(this.vertexSize),this.oneLineLabelOffset=-Math.sqrt(this.vertexSize),this.twoLineLabelOffset=-Math.sqrt(this.vertexSize)-this.vertexLabelSize,this.collapsedCTLabelOffset=-this.vertexLabelSize/2,this.rootExplorationTwoLineLabelOffset=-Math.sqrt(this.rootExplorationVertexSize)-this.vertexLabelSize,this.rootExplorationOneLineLabelOffset=-Math.sqrt(this.rootExplorationVertexSize),this.heightTopPadding=this.offsetIncrementTwoLines,this.widthRightPadding=.05*this.withDrawingDIV}}var p=(()=>{return(o=p||(p={}))[o.BoneMarrow=0]="BoneMarrow",o[o.Brain=1]="Brain",o[o.Heart=2]="Heart",o[o.Kidney=3]="Kidney",o[o.LargeIntestine=4]="LargeIntestine",o[o.Lung=5]="Lung",o[o.LymphNodes=6]="LymphNodes",o[o.Skin=7]="Skin",o[o.Spleen=8]="Spleen",o[o.Thymus=9]="Thymus",o[o.Vasculature=10]="Vasculature",o[o.All=11]="All",o[o.HeartWithCTTypology=12]="HeartWithCTTypology",p;var o})();function E(){return(E=(0,z.Z)(function*(o,e){if(o in e.IDtoOntologyID){let t="https://asctb-api.herokuapp.com/lookup/";switch(e.IDtoOntologyType[o]){case M.UBERON:t+="UBERON/"+e.IDtoOntologyID[o];break;case M.FMAID:t+="FMA/"+e.IDtoOntologyID[o];break;case M.HGNC:t+="HGNC/"+e.IDtoOntologyID[o];break;case M.CL:t+="CL/"+e.IDtoOntologyID[o]}return yield(yield fetch(t)).json()}return Promise.reject()})).apply(this,arguments)}var u=(()=>{return(o=u||(u={}))[o.AS=0]="AS",o[o.CT=1]="CT",o[o.BM=2]="BM",u;var o})(),M=(()=>{return(o=M||(M={}))[o.UBERON=0]="UBERON",o[o.FMAID=1]="FMAID",o[o.HGNC=2]="HGNC",o[o.CL=3]="CL",M;var o})();class D extends class{constructor(e){this.verticesCT=e,this.outDegree=new Map,this.involved=new Map,this.initializeContainment(),this.parseContainment(),this.parseInvolvedVertices(this.root),this.parseAbstractRectangles()}parseContainment(){this.containment=[],this.worker(this.root)}worker(e){e in this.outDegree?this.outDegree[e].forEach(i=>{this.worker(i)}):this.containment.push(e)}parseInvolvedVertices(e){if(e in this.outDegree){let t=[];this.outDegree[e].forEach(i=>{this.parseInvolvedVertices(i),t=t.concat(this.involved[i])}),this.involved[e]=t}else this.involved[e]=[e]}parseAbstractRectangles(){let e=this.root;this.numRectangles=0,this.rectangleMap=new Map,this.rectIDArtificialIDMap=new Map,this.artificialIdRectIDMap=new Map,e in this.outDegree&&this.outDegree[e].forEach(t=>{this.abstractRectangleWorker(t)})}abstractRectangleWorker(e){e in this.outDegree&&(this.rectangleMap[this.numRectangles]=this.involved[e],this.rectIDArtificialIDMap[this.numRectangles]=e,this.artificialIdRectIDMap[e]=this.numRectangles,this.numRectangles+=1,this.outDegree[e].forEach(t=>{this.abstractRectangleWorker(t)}))}update(){this.parseContainment(),this.parseInvolvedVertices(this.root),this.parseAbstractRectangles()}}{constructor(e){super(e)}initializeContainment(){let t=-4e5,i=this.verticesCT.map(s=>({value:s,sort:Math.random()})).sort((s,r)=>s.sort-r.sort).map(({value:s})=>s).splice(0);for(;i.length>1;){let s=[];for(let r=1;r<i.length;r+=2)s.push(t),this.outDegree[t]=i.length%2==1&&r+1==i.length-1?[i[r-1],i[r],i[r+1]]:[i[r-1],i[r]],t-=1;i=s}this.root=i[0],this.initialRoot=this.root}}class x{constructor(e){if(this.vertexSize=new Map,1==e.length){this.organ=e[0],this.vertices=[],this.inDegree=new Map,this.outDegree=new Map,this.vertexType=new Map,this.vertexLabel=new Map,this.vertexVisible=new Map,this.vertexColor=new Map,this.IDtoOntologyType=new Map,this.IDtoOntologyID=new Map,this.ready=!1;const t=function(o){const s="https://asctb-api.herokuapp.com/v2/1tK916JyG5ZSXW_cXfsyZnzXfjyoN-8B2GXLbYD6_vF0/";switch(o){case p.BoneMarrow:return s+"1845311048/graph";case p.Brain:return s+"1379088218/graph";case p.Heart:return"https://asctb-api.herokuapp.com/v2/csv?output=graph&csvUrl=https://hubmapconsortium.github.io/ccf-releases/v1.0/asct-b/ASCT-B_VH_Heart.csv";case p.HeartWithCTTypology:return"https://asctb-api.herokuapp.com/v2/csv?output=graph&csvUrl=https://hubmap-link-api.herokuapp.com/asctb/UBERON:0000948";case p.Kidney:return s+"2137043090/graph";case p.LargeIntestine:return s+"512613979/graph";case p.Lung:return s+"1824552484/graph";case p.LymphNodes:return s+"1440276882/graph";case p.Skin:return s+"1158675184/graph";case p.Spleen:return s+"984946629/graph";case p.Thymus:return s+"1823527529/graph";case p.Vasculature:return s+"361657182/graph";default:return}}(this.organ);this.readyPromise=this.initializeGraph(t).then(i=>{let s=Math.sqrt(window.screen.height*window.screen.height+window.screen.width*window.screen.width)/2;this.vertices.forEach(r=>this.vertexSize[r]=s),this.ready=!0,this.containment=new D(this.verticesCT)})}else this.organ=e[0],this.vertices=e[1],this.inDegree=e[2],this.outDegree=e[3],this.vertexType=e[4],this.vertexLabel=e[5],this.vertexVisible=e[6],this.vertexColor=e[7],this.IDtoOntologyType=e[8],this.IDtoOntologyID=e[9],this.verticesAS=[],this.verticesCT=[],this.verticesBM=[],this.numVertices=this.vertices.length,this.numVerticesAS=0,this.numVerticesCT=0,this.numVerticesBM=0,this.vertices.forEach(t=>{switch(this.vertexType[t]){case u.AS:this.verticesAS.push(t),this.numVerticesAS+=1;break;case u.CT:this.verticesCT.push(t),this.numVerticesCT+=1;break;case u.BM:this.verticesBM.push(t),this.numVerticesBM+=1}this.vertexSize[t]=300}),this.ready=!0}processOntologyID(e,t){if(""!=e.ontologyId){let i=e.ontologyId;if(-1!=i.indexOf(":")){i=i.split(" ")[0];const[r,n]=i.split(":");switch(r){case"HGNC":this.IDtoOntologyType[t]=M.HGNC;break;case"UBERON":this.IDtoOntologyType[t]=M.UBERON;break;case"FMAID":this.IDtoOntologyType[t]=M.FMAID;break;case"CL":this.IDtoOntologyType[t]=M.CL}this.IDtoOntologyID[t]=n}}}initializeGraph(e){var t=this;return(0,z.Z)(function*(){const i=yield fetch(e).then(s=>s.json()).then(s=>s.data);t.verticesAS=[],t.verticesCT=[],t.verticesBM=[];for(const s of i.nodes){const{id:r,type:n,name:a,metadata:l}=s;switch(t.processOntologyID(l,r),n){case"AS":t.vertexType[r]=u.AS,t.vertexColor[r]="red",t.verticesAS.push(r);break;case"CT":t.vertexType[r]=u.CT,t.vertexColor[r]="blue",t.verticesCT.push(r);break;case"BM":case"gene":t.vertexType[r]=u.BM,t.vertexColor[r]="green",t.verticesBM.push(r);break;case"protein":t.vertexType[r]=u.BM,t.vertexColor[r]="Chartreuse",t.verticesBM.push(r)}t.vertexVisible[r]=1,t.vertices.push(r),t.vertexLabel[r]=a}for(const s of i.edges){const{source:r,target:n}=s;t.vertexType[r]==u.CT&&t.vertexType[n]==u.CT&&t.organ==p.Heart&&console.log("SOURCE: ",r,"TARGET",n,t.organ),(t.vertexType[r]!=u.CT||t.vertexType[n]!=u.CT)&&(t.vertexType[r]!=u.AS||t.vertexType[n]!=u.BM)&&(n in t.inDegree?t.inDegree[n].includes(r)||t.inDegree[n].push(r):t.inDegree[n]=[r],r in t.outDegree?t.outDegree[r].includes(n)||t.outDegree[r].push(n):t.outDegree[r]=[n])}t.numVerticesAS=t.verticesAS.length,t.numVerticesCT=t.verticesCT.length,t.numVerticesBM=t.verticesBM.length,t.numVertices=t.numVerticesAS+t.numVerticesCT+t.numVerticesBM})()}}var R=B(732);function ae(o,e,t){if((0,R.kJ)(o))return`[${o.map(i=>e((0,R.HD)(i)?i:oe(i,t))).join(", ")}]`;if((0,R.Kn)(o)){let i="";const s=o,{title:r,image:n}=s,a=function(o,e){var t={};for(var i in o)Object.prototype.hasOwnProperty.call(o,i)&&e.indexOf(i)<0&&(t[i]=o[i]);if(null!=o&&"function"==typeof Object.getOwnPropertySymbols){var s=0;for(i=Object.getOwnPropertySymbols(o);s<i.length;s++)e.indexOf(i[s])<0&&Object.prototype.propertyIsEnumerable.call(o,i[s])&&(t[i[s]]=o[i[s]])}return t}(s,["title","image"]);r&&(i+=`<h2>${e(r)}</h2>`),n&&(i+=`<img src="${e(n)}">`);const l=Object.keys(a);if(l.length>0){i+="<table>";for(const c of l){let h=a[c];void 0!==h&&((0,R.Kn)(h)&&(h=oe(h,t)),i+=`<tr><td class="key">${e(c)}:</td><td class="value">${e(h)}</td></tr>`)}i+="</table>"}return i||"{}"}return e(o)}function oe(o,e){return JSON.stringify(o,function(o){const e=[];return function(t,i){if("object"!=typeof i||null===i)return i;const s=e.indexOf(this)+1;return e.length=s,e.length>o?"[Object]":e.indexOf(i)>=0?"[Circular]":(e.push(i),i)}}(e))}const le="vg-tooltip-element",Re={offsetX:10,offsetY:10,id:le,styleId:"vega-tooltip-style",theme:"light",disableDefaultStyle:!1,sanitize:function(o){return String(o).replace(/&/g,"&amp;").replace(/</g,"&lt;")},maxDepth:2,formatTooltip:ae};class he{constructor(e){this.options=Object.assign(Object.assign({},Re),e);const t=this.options.id;if(this.el=null,this.call=this.tooltipHandler.bind(this),!this.options.disableDefaultStyle&&!document.getElementById(this.options.styleId)){const i=document.createElement("style");i.setAttribute("id",this.options.styleId),i.innerHTML=function(o){if(!/^[A-Za-z]+[-:.\w]*$/.test(o))throw new Error("Invalid HTML ID");return"#vg-tooltip-element {\n  visibility: hidden;\n  padding: 8px;\n  position: fixed;\n  z-index: 1000;\n  font-family: sans-serif;\n  font-size: 11px;\n  border-radius: 3px;\n  box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.1);\n  /* The default theme is the light theme. */\n  background-color: rgba(255, 255, 255, 0.95);\n  border: 1px solid #d9d9d9;\n  color: black; }\n  #vg-tooltip-element.visible {\n    visibility: visible; }\n  #vg-tooltip-element h2 {\n    margin-top: 0;\n    margin-bottom: 10px;\n    font-size: 13px; }\n  #vg-tooltip-element img {\n    max-width: 200px;\n    max-height: 200px; }\n  #vg-tooltip-element table {\n    border-spacing: 0; }\n    #vg-tooltip-element table tr {\n      border: none; }\n      #vg-tooltip-element table tr td {\n        overflow: hidden;\n        text-overflow: ellipsis;\n        padding-top: 2px;\n        padding-bottom: 2px; }\n        #vg-tooltip-element table tr td.key {\n          color: #808080;\n          max-width: 150px;\n          text-align: right;\n          padding-right: 4px; }\n        #vg-tooltip-element table tr td.value {\n          display: block;\n          max-width: 300px;\n          max-height: 7em;\n          text-align: left; }\n  #vg-tooltip-element.dark-theme {\n    background-color: rgba(32, 32, 32, 0.9);\n    border: 1px solid #f5f5f5;\n    color: white; }\n    #vg-tooltip-element.dark-theme td.key {\n      color: #bfbfbf; }\n".toString().replace(le,o)}(t);const s=document.head;s.childNodes.length>0?s.insertBefore(i,s.childNodes[0]):s.appendChild(i)}}tooltipHandler(e,t,i,s){var r;if(this.el=document.getElementById(this.options.id),this.el||(this.el=document.createElement("div"),this.el.setAttribute("id",this.options.id),this.el.classList.add("vg-tooltip"),document.body.appendChild(this.el)),(null!==(r=document.fullscreenElement)&&void 0!==r?r:document.body).appendChild(this.el),null==s||""===s)return void this.el.classList.remove("visible",`${this.options.theme}-theme`);this.el.innerHTML=this.options.formatTooltip(s,this.options.sanitize,this.options.maxDepth),this.el.classList.add("visible",`${this.options.theme}-theme`);const{x:a,y:l}=function(o,e,t,i){let s=o.clientX+t;s+e.width>window.innerWidth&&(s=+o.clientX-t-e.width);let r=o.clientY+i;return r+e.height>window.innerHeight&&(r=+o.clientY-i-e.height),{x:s,y:r}}(t,this.el.getBoundingClientRect(),this.options.offsetX,this.options.offsetY);this.el.setAttribute("style",`top: ${l}px; left: ${a}px`)}}class We{constructor(e){this.currentString="",this.lastID=null,this.controller=e}compute(e,t,i){if(this.controller.gui.appearance[1].sel){let r=this.createTooltip();this.processEvent(e,t,r,i)}else this.removeCurrentTooltip()}processOntologyStrings(e,t){let i="Not Available ",s="Not Available";if(e in t.IDtoOntologyID)switch(i=t.IDtoOntologyID[e],t.IDtoOntologyType[e]){case M.UBERON:s="UBERON";break;case M.CL:s="CL";break;case M.HGNC:s="HGNC";break;case M.FMAID:s="FMAID"}return[s,i]}processDescription(e){let t=e.description,i=" ",s=t.split(" "),r=0,n=e.link.length-4;return s.forEach(a=>{r>n&&(i+="<br>",r=0),i+=a+" ",r+=a.length}),0!=t.length?i:"Not Available "}processColor(e,t){let i="";switch(e.vertexType[t]){case u.AS:i="red";break;case u.CT:i="deepskyblue";break;case u.BM:i="greenyellow"}return"color:"+i}processEvent(e,t,i,s){if(null!=t){let r=t.datum.id;r!=this.lastID&&function(o,e){return E.apply(this,arguments)}(r,s).then(n=>{if(null!=n){let[a,l]=this.processOntologyStrings(r,s),c=this.processDescription(n),h=this.processColor(s,r);this.currentString="<div style='font-size: 2vh'> <u>Name:</u>  "+s.vertexLabel[r]+"<br>Database:  "+a+"<br>Ontology ID:  "+l+"<br><div style="+h+">"+n.link+"</div><u>  Description: </u> <br>"+c+"</div>",i.call(i,e,{},"foo")}}).catch(n=>{this.removeCurrentTooltip()}),this.lastID=r}else this.removeCurrentTooltip()}removeCurrentTooltip(){let e=document.getElementById("vg-tooltip-element");null!=e&&e.remove()}createTooltip(){return new he({offsetX:30,offsetY:10,id:"vg-tooltip-element",styleId:"vega-tooltip-style",theme:"dark",disableDefaultStyle:!1,sanitize:t=>this.currentString,formatTooltip:ae})}}var je=B(473);class N{constructor(e){this.rotateAngle=this.rotateStringToNumber(e),this.rotate=0!=this.rotateAngle}rotateStringToNumber(e){switch(e){case"90 Degree":return 180;case"180 Degree":return 90;case"270 Degree":return 270;default:return 0}}}class j{constructor(e,t){this.type=t,this.controller=e,this.toolTip=new We(e),this.firstTime=!0}exportImage(){var e=this;return(0,z.Z)(function*(){let t=yield e.currentView.toSVG(),i=new Blob([t],{type:"image/svg+xml"});je(i,"graph.jpg")})()}intersectRule(e,t){const i=e.x||0,s=e.y||0;return this.intersectBoxLine(t,i,s,null!=e.x2?e.x2:i,null!=e.y2?e.y2:s)}intersectBoxLine(e,t,i,s,r){const{x1:n,y1:a,x2:l,y2:c}=e,h=s-t,g=r-i;let T,I,C,L,f=0,d=1;for(L=0;L<4;++L){if(0===L&&(T=-h,I=-(n-t)),1===L&&(T=h,I=l-t),2===L&&(T=-g,I=-(a-i)),3===L&&(T=g,I=c-i),Math.abs(T)<1e-10&&I<0)return!1;if(C=I/T,T<0){if(C>d)return!1;C>f&&(f=C)}else if(T>0){if(C<f)return!1;C<d&&(d=C)}}return!0}boundingBoxIntersection(e){let i=e.scenegraph().root.items[0].items[1].items,s=[];i.forEach(n=>{s.push(n.bounds)});let r=!1;for(let n=0;n<s.length;n++)for(let a=0;a<s.length&&!r;a++)if(n!=a&&this.intersectBoxLine(s[n],s[a].x1,s[a].y1,s[a].x2,s[a].y2)){r=!0;break}return r}resizeView(e,t,i,s,r,n,a){e.runAfter(function(f){var d=0;f._autosize=0,f.width()!==s&&(d=1,f.signal("width",s),f._resizeWidth.skip(!0)),f.height()!==r&&(d=1,f.signal("height",r),f._resizeHeight.skip(!0)),(f._viewWidth!==t||f._viewHeight!==i)&&(d=1,f._resize=1,f._viewWidth=s,f._viewHeight=r),(f._origin[0]!==n[0]||f._origin[1]!==n[1])&&(f._resize=1,f._origin=n),d&&f.run("enter"),a&&f.runAfter(function(){f.resize()})},!1,1)}contentRectInDrawingArea(){let e=!1,t=document.querySelectorAll(".mark-symbol.role-mark");if(t.length>0){let i=t[0].getBoundingClientRect();i.height<this.controller.properties.heightDrawingDIV&&i.width<this.controller.properties.withDrawingDIV&&(e=!0)}return e}fitContent(e){let t=document.querySelectorAll(".mark-symbol.role-mark");if(t.length>0){this.controller.currentMode.reset();let i=t[0].getBoundingClientRect(),s=new N(this.controller.gui.selectedRotation);e.signal("xdom",[0,e.signal("width")]),e.signal("ydom",[0,e.signal("height")]),e.signal("sizeVertexDom",[50,300]),e.signal("xdomContainment",[0,e.signal("width")]),e.signal("ydomContainment",[0,e.signal("height")]),e.signal("sizeLabelDom",[6,8]),e.signal("anchor","Explore"==this.type||180==s.rotateAngle||270==s.rotateAngle?[0,0]:[this.controller.properties.totalWidth/2,0]),e.signal("zoom",i.width>i.height?i.width/(.98*this.controller.properties.totalWidth):i.height/(.9*this.controller.properties.heightDrawingDIV)),e.runAsync().then(()=>{this.currentView=e})}}setBackground(e){e.signal("background",this.darkMode?"black":"white")}setGraph2DParameter(e){let t=this.controller.gui.appearance[2].sel,i=this.controller.gui.appearance[0].sel;this.darkMode=t,e.graphStyle.labelEnabled=i,t?(e.graphStyle.darkMode=!0,e.graphStyle.labelFill="#fff"):(e.graphStyle.darkMode=!1,e.graphStyle.labelFill="#000")}updateView(e,t){let i=t.getState();i.data=e.getState().data,i.signals.width=e.getState().signals.width,i.signals.height=e.getState().signals.height,e.setState(i),t.finalize()}calculateContainerStrings(){let e=this.controller.graphs[this.controller.currentOrgan].containment,t=[],i=1;return e.outDegree[e.initialRoot].forEach(s=>{t.push("Container "+i),i+=1}),t}}const Xe={$schema:"https://vega.github.io/schema/vega/v5.json",description:"Graph Drawing",padding:{top:25,left:0,right:0,bottom:0},autosize:"none",signals:[{name:"shape",value:"line"},{name:"xrange",update:"[0, width]"},{name:"yrange",update:"[ 0,height]"},{name:"down",value:null,on:[{events:"touchend",update:"null"},{events:"mousedown, touchstart",update:"xy()"}]},{name:"hover",on:[{events:"*:mouseover",encode:"hover"},{events:"*:mouseout",encode:"leave"},{events:"*:mousedown",encode:"select"},{events:"*:mouseup",encode:"release"}]},{name:"xoffset",update:"-(width + padding.bottom)"},{name:"yoffset",update:"-(height + padding.left)"},{name:"xcur",value:null,on:[{events:"mousedown, touchstart, touchend",update:"slice(xdom)"}]},{name:"ycur",value:null,on:[{events:"mousedown, touchstart, touchend",update:"slice(ydom)"}]},{name:"delta",value:[0,0],on:[{events:[{source:"window",type:"mousemove",consume:!0,between:[{type:"mousedown"},{source:"window",type:"mouseup"}]},{type:"touchmove",consume:!0,filter:"event.touches.length === 1"}],update:"down ? [down[0]-x(), y()-down[1]] : [0,0]"}]},{name:"anchor",value:[0,0],on:[{events:"wheel",update:"[ invert('xscale', x()), invert('yscale', y())]"},{events:{type:"touchstart",filter:"event.touches.length===2"},update:"[(xdom[0] + xdom[1]) / 2, (ydom[0] + ydom[1]) / 2]"}]},{name:"zoom",value:1,on:[{events:"wheel!",force:!0,update:"pow(1.001, event.deltaY * pow(16, event.deltaMode))"},{events:{signal:"dist2"},force:!0,update:"dist1 / dist2"}]},{name:"dist1",value:0,on:[{events:{type:"touchstart",filter:"event.touches.length===2"},update:"pinchDistance(event)"},{events:{signal:"dist2"},update:"dist2"}]},{name:"dist2",value:0,on:[{events:{type:"touchmove",consume:!0,filter:"event.touches.length===2"},update:"pinchDistance(event)"}]},{name:"sizeLabelRange",update:"[8,14]"},{name:"sizeLabelDom",update:"[8,14]",on:[{events:{signal:"zoom"},update:"[ sizeLabelDom[0] * zoom, sizeLabelDom[1] * zoom]"}]},{name:"sizeVertexRange",update:"[50,300]"},{name:"sizeVertexDom",update:"[50,300]",on:[{events:{signal:"zoom"},update:"[ sizeVertexDom[0] * zoom, sizeVertexDom[1] * zoom]"}]},{name:"ydomLabelOffset",update:"[0,height]",on:[{events:{signal:"zoom"},update:"[ydomLabelOffset[0], ydomLabelOffset[1]]"}]},{name:"xdomContainment",update:"[0,width]",on:[{events:{signal:"zoom"},update:"[ xdomContainment[0] * zoom, xdomContainment[1] * zoom]"}]},{name:"ydomContainment",update:"[0,height]",on:[{events:{signal:"zoom"},update:"[ydomContainment[0]* zoom, ydomContainment[1] * zoom]"}]},{name:"xdom",update:"[0,width]",on:[{events:{signal:"delta"},update:"[xcur[0] + span(xcur) * delta[0] / width, xcur[1] + span(xcur) * delta[0] / width]"},{events:{signal:"zoom"},update:"[anchor[0] + (xdom[0] - anchor[0]) * zoom, anchor[0] + (xdom[1] - anchor[0]) * zoom]"}]},{name:"ydom",update:"[0,height]",on:[{events:{signal:"delta"},update:"[ycur[0] - span(ycur) * delta[1] / height, ycur[1] - span(ycur) * delta[1] / height]"},{events:{signal:"zoom"},update:"[anchor[1] + (ydom[0] - anchor[1]) * zoom, anchor[1] + (ydom[1] - anchor[1]) * zoom]"}]},{name:"xdomC2",update:"[0,width]",on:[{events:{signal:"zoom"},update:"[anchor[0] + (xdom[0] - anchor[0]) * zoom, anchor[0] + (xdom[1] - anchor[0]) * zoom]"}]},{name:"ydomC2",update:"[0,height]",on:[{events:{signal:"zoom"},update:"[anchor[1] + (ydom[0] - anchor[1]) * zoom, anchor[1] + (ydom[1] - anchor[1]) * zoom]"}]}],data:[{name:"vertices",values:[]},{name:"edges",values:[],transform:[{type:"lookup",from:"vertices",key:"id",fields:["source","target"],as:["source","target"]},{type:"linkpath",shape:"diagonal",orient:"horizontal",sourceX:{field:"source.x",scale:"xscale"},sourceY:{field:"source.y",scale:"yscale"},targetX:{field:"target.x",scale:"xscale"},targetY:{field:"target.y",scale:"yscale"},as:"lp"}]},{name:"rects",values:[]},{name:"edges2",values:[],transform:[{type:"lookup",from:"vertices",key:"id",fields:["source","target"],as:["source","target"]}]}],projections:[],scales:[{name:"labelSizeScale",zero:!1,domain:{signal:"sizeLabelDom"},range:{signal:"sizeLabelRange"}},{name:"vertexSizeScale",zero:!1,domain:{signal:"sizeVertexDom"},range:{signal:"sizeVertexRange"}},{name:"xscaleC2",zero:!1,domain:{signal:"xdomC2"},range:{signal:"xrange"}},{name:"yscaleC2",zero:!1,domain:{signal:"ydomC2"},range:{signal:"yrange"}},{name:"xscale",zero:!1,domain:{signal:"xdom"},range:{signal:"xrange"}},{name:"yscale",zero:!1,domain:{signal:"ydom"},range:{signal:"yrange"}},{name:"xscaleC",zero:!1,domain:{signal:"xdomContainment"},range:{signal:"xrange"}},{name:"yscaleLabel",zero:!1,domain:{signal:"ydomLabelOffset"},range:{signal:"yrange"}},{name:"yscaleC",zero:!1,domain:{signal:"ydomContainment"},range:{signal:"yrange"}}],marks:[{type:"symbol",from:{data:"vertices"},encode:{enter:{size:{field:"vertexSize"},tooltip:{value:""},fill:{field:"color"},shape:{field:"vertexShape"},opacity:{field:"visible"},stroke:{value:"white"},strokeWidth:{value:2.5},strokeOpacity:{value:0}},update:{size:{signal:"min(datum.vertexSize,scale('vertexSizeScale',datum.vertexSize))"},x:{field:"x",scale:"xscale"},y:{field:"y",scale:"yscale"}}},zindex:1},{type:"rect",from:{data:"rects"},encode:{enter:{fill:{value:"#ffffff"},stroke:{value:"#000000"}},update:{x:{field:"x",scale:"xscale"},y:{field:"y",scale:"yscale"},width:{field:"w",scale:"xscaleC"},height:{field:"h",scale:"yscaleC"},blend:{value:"exclusion"},cornerRadius:{value:"35"},strokeWidth:{value:"2"}}}},{type:"path",interactive:!1,from:{data:"edges"},encode:{enter:{stroke:{field:"color"}},update:{path:{signal:"'M'+ scale('xscale',substring(split(datum.lp,',')[0],1)) + ',' + scale('yscale',split(split(datum.lp,',')[1],'C')[0]) + 'C' + scale('xscale',split(split(datum.lp,',')[1],'C')[1]) + ',' + scale('yscale',split(split(datum.lp,',')[2],' ')[0]) + ' '+ scale('xscale',split(split(datum.lp,',')[2],' ')[1]) + ',' + scale('yscale',split(split(datum.lp,',')[3],' ')[0]) + ','  + scale('xscale',split(split(datum.lp,',')[3],' ')[1])  +',' + scale('yscale',split(datum.lp,',')[4]) "}}}},{type:"path",interactive:!1,from:{data:"edges2"},encode:{enter:{stroke:{field:"color"}},update:{path:{signal:" 'M'+ scale('xscale',datum.source.x) + ',' + scale('yscale',datum.source.y) + 'L' + scale('xscale',datum.target.x) + ',' + scale('yscale',datum.target.y)"}}}}]};class Fe{constructor(e,t,i,s){this.properties=s,this.drawingHeight=Math.max(e,this.properties.heightDrawingDIV),this.drawingWidth=Math.max(t+this.properties.widthRightPadding,this.properties.withDrawingDIV),this.darkMode=i,this.initializeLabelParameter()}initializeLabelParameter(){this.labelEnabled=!0,this.labelSize=this.properties.vertexLabelSize,this.labelFill=this.darkMode?"#fff":"#000"}toggleLabelEnabled(e){this.labelEnabled=!this.labelEnabled}exportSpezificationAnimation(e,t){let i=e;i.width=this.drawingWidth,i.height=this.drawingHeight;let s="";switch(t.angle){case 0:case 90:s="horizontal";break;default:s="vertical"}return i.data[1].transform[1].orient=s,e.marks[2].encode.enter.stroke={field:"color"},this.darkMode?(e.marks[1].encode.enter.fill={value:"#000000"},e.marks[1].encode.enter.stroke={value:"#ffffff"},e.marks[2].encode.enter.opacity={field:"opacity"},e.marks[3].encode.enter.opacity={field:"opacity"}):(e.marks[2].encode.enter.opacity={value:.5},e.marks[2].encode.enter.strokeOpacity={field:"opacity"},e.marks[3].encode.enter.opacity={value:.5},e.marks[3].encode.enter.strokeOpacity={field:"opacity"}),e.signals[4].value=[1,this.drawingWidth],e.signals[5].value=[this.drawingHeight,1],this.labelEnabled&&(i.marks=[i.marks[1],i.marks[0],i.marks[2],i.marks[3],{type:"text",from:{data:"vertices"},encode:{enter:{fill:{field:"labelColor"}},update:{x:{field:"x"},y:{field:"y"},lineHeight:0,angle:{field:"angle"},dy:{field:"labelOffsetY"},dx:{field:"labelOffsetX"},fontSize:{value:this.labelSize},fillOpacity:{value:1},strokeOpacity:{value:1},align:{value:"center"}}},zindex:2}]),i}exportSpezification(e,t){let i=e;i.width=this.drawingWidth,i.height=this.drawingHeight;let s="";switch(t.angle){case 0:case 90:s="horizontal";break;default:s="vertical"}return i.data[1].transform[1].orient=s,e.marks[2].encode.enter.stroke={field:"color"},this.darkMode?(e.marks[1].encode.enter.fill={value:"#000000"},e.marks[1].encode.enter.stroke={value:"#ffffff"},e.marks[2].encode.enter.opacity={field:"opacity"},e.marks[3].encode.enter.opacity={field:"opacity"}):(e.marks[2].encode.enter.opacity={value:.5},e.marks[2].encode.enter.strokeOpacity={field:"opacity"},e.marks[3].encode.enter.opacity={value:.5},e.marks[3].encode.enter.strokeOpacity={field:"opacity"}),e.signals[4].value=[1,this.drawingWidth],e.signals[5].value=[this.drawingHeight,1],this.labelEnabled&&(i.marks=[i.marks[1],i.marks[0],i.marks[2],i.marks[3],{type:"text",from:{data:"vertices"},encode:{enter:{fill:{field:"labelColor"},text:{field:"label"}},update:{text:{signal:"if(scale('labelSizeScale',20)< 8,' ',datum.label)"},x:{field:"x",scale:"xscale"},y:{field:"y",scale:"yscale"},angle:{field:"angle"},baseline:{value:"line-top"},dy:{signal:"if(datum.labelOffsetY == -7,-7,if(datum.labelOffsetY =="+this.properties.oneLineLabelOffset+"|| datum.labelOffsetY =="+this.properties.rootExplorationOneLineLabelOffset+" ,-sqrt(scale('vertexSizeScale',datum.vertexSize)),-14-sqrt(scale('vertexSizeScale',datum.vertexSize))))"},fillOpacity:{value:1},strokeOpacity:{value:1},align:{value:"center"}}},zindex:2}]),i}}class v{constructor(e,t){this.vertices=t.slice(0),this.createVertexInducedMap(e,t),this.numVertices=t.length,this.outDegree=new Map,this.inDegree=new Map,this.vertexVisible=new Map,this.induceEdges(t,e.outDegree,this.outDegree),this.induceEdges(t,e.inDegree,this.inDegree),this.induceVertexArrays(t,e),this.vertexType=new Map,this.vertexLabel=new Map,this.vertexColor=new Map,this.induceDataContainer(t,e.vertexType,this.vertexType),this.induceDataContainer(t,e.vertexLabel,this.vertexLabel),this.induceDataContainer(t,e.vertexVisible,this.vertexVisible),this.induceDataContainer(t,e.vertexColor,this.vertexColor),this.organ=e.organ,this.IDtoOntologyType=new Map,this.IDtoOntologyID=new Map,this.induceDataContainer(t,e.IDtoOntologyType,this.IDtoOntologyType),this.induceDataContainer(t,e.IDtoOntologyID,this.IDtoOntologyID),this.vertexSize=new Map,this.induceDataContainer(t,e.vertexSize,this.vertexSize)}addVertex(e,t,i,s,r,n){switch(e){case u.AS:this.verticesAS.push(t),this.numVerticesAS+=1;break;case u.CT:this.verticesCT.push(t),this.numVerticesCT+=1;break;case u.BM:this.verticesBM.push(t),this.numVerticesBM+=1}this.vertices.push(t),this.vertexType[t]=e,this.vertexColor[t]=i,this.vertexVisible[t]=1,this.vertexSize[t]=r,this.vertexLabel[t]=n,this.numVertices+=1}createVertexInducedMap(e,t){this.vertexInduced=new Map,e.vertices.forEach(i=>{this.vertexInduced[i]=!!t.includes(i)})}induceVertexArrays(e,t){this.verticesAS=[],this.verticesCT=[],this.verticesBM=[],e.forEach(i=>{switch(t.vertexType[i]){case u.AS:this.verticesAS.push(i);break;case u.CT:this.verticesCT.push(i);break;case u.BM:this.verticesBM.push(i)}}),this.numVerticesAS=this.verticesAS.length,this.numVerticesCT=this.verticesCT.length,this.numVerticesBM=this.verticesBM.length}induceEdges(e,t,i){e.forEach(s=>{if(s in t){let r=[];t[s].forEach(n=>{this.vertexInduced[n]&&r.push(n)}),r.length>0&&(i[s]=r)}})}induceDataContainer(e,t,i){e.forEach(s=>{i[s]=t[s]})}merge(e){let t=e.vertices;t.forEach(i=>{i in e.outDegree&&(this.outDegree[i]=e.outDegree[i]),i in e.inDegree&&(this.inDegree[i]=e.inDegree[i])}),this.induceDataContainer(t,e.vertexType,this.vertexType),this.induceDataContainer(t,e.vertexLabel,this.vertexLabel),this.induceDataContainer(t,e.vertexVisible,this.vertexVisible),this.induceDataContainer(t,e.vertexColor,this.vertexColor),this.induceDataContainer(t,e.IDtoOntologyType,this.IDtoOntologyType),this.induceDataContainer(t,e.IDtoOntologyID,this.IDtoOntologyID),this.induceDataContainer(t,e.vertexSize,this.vertexSize),t.forEach(i=>{switch(e.vertexType[i]){case u.AS:this.verticesAS.push(i),this.numVerticesAS+=1;break;case u.CT:this.verticesCT.push(i),this.numVerticesCT+=1;break;case u.BM:this.verticesBM.push(i),this.numVerticesBM+=1}this.vertices.push(i)}),this.numVerticesAS=this.verticesAS.length,this.numVerticesCT=this.verticesCT.length,this.numVerticesBM=this.verticesBM.length}}var m=B(817);class Ue{constructor(e,t){t.rotate&&(90==t.rotateAngle?this.apply90Rot(e,t.rotateAngle):180==t.rotateAngle?this.applyXYSwap(e):270==t.rotateAngle&&(this.applyXYSwap(e),this.apply90Rot(e,270)),this.updateDimensions(e))}applyXYSwap(e){Object.keys(e).forEach(t=>{let i=e[parseFloat(t)];i=new m.S(i.y+20,i.x+20),e[parseFloat(t)]=i})}translateMap(e){Object.keys(e).forEach(t=>{e[parseFloat(t)]=this.translate(e[parseFloat(t)],Math.abs(this.minX),Math.abs(this.minY))})}translate(e,t,i){return new m.S(e.x+t,e.y+i)}scaleXY(e,t){this.matrix11=e,this.matrix12=0,this.matrix21=0,this.matrix22=t}rotate(e){let t=e*Math.PI/180;this.matrix11=Math.cos(t),this.matrix12=-Math.sin(t),this.matrix21=Math.sin(t),this.matrix22=Math.cos(t)}calculateMap(e){return new m.S(this.matrix11*e.x+this.matrix21*e.y,this.matrix12*e.x+this.matrix22*e.y)}apply90Rot(e,t){this.rotate(t),Object.keys(e).forEach(s=>{let r=e[parseFloat(s)];r=this.calculateMap(r),e[parseFloat(s)]=r}),this.updateDimensions(e),Object.keys(e).forEach(s=>{let r=e[parseFloat(s)],n=20,a=20;this.minX<0&&(n+=Math.abs(this.minX)),this.minY<0&&(a+=Math.abs(this.minY)),r=this.translate(r,n,a),e[parseFloat(s)]=new m.S(r.y,r.x)})}applyMap(e){Object.keys(e).forEach(t=>{e[parseFloat(t)]=this.calculateMap(e[parseFloat(t)])})}updateDimensions(e){let t=Number.MAX_VALUE,i=Number.MIN_VALUE,s=Number.MAX_VALUE,r=Number.MIN_VALUE;Object.keys(e).forEach(n=>{let a=e[n];a.x<t&&(t=a.x),a.x>i&&(i=a.x),a.y<s&&(s=a.y),a.y>r&&(r=a.y)}),this.minX=t,this.maxX=i,this.minY=s,this.maxY=r}}class Q{constructor(e,t,i){this.graph=e,this.drawing=new Map,this.highlightedEdge=new Map,this.rects=[],this.labelPosition=new Map,this.graph.vertices.forEach(s=>this.labelPosition[s]="0"),this.angle=t.rotateAngle,this.rotate=t.rotate,this.rotation=t,this.properties=i}initializeHighlights(e,t){e.vertices.forEach(i=>{i in e.outDegree&&e.outDegree[i].forEach(s=>{let r=String(i)+"|"+String(s);t[r]=!1})})}rotateAngle(e,t){t.leaves.forEach(i=>{this.labelPosition[i]=e,i in this.graph.inDegree&&this.graph.inDegree[i].forEach(s=>this.labelPosition[s]=e)}),this.graph.verticesCT.forEach(i=>this.labelPosition[i]=e),this.graph.verticesBM.forEach(i=>this.labelPosition[i]=e)}calculateWidthHeight(){this.maximumWidth=0,this.maximumHeight=0,this.graph.vertices.forEach(e=>{this.drawing[e].y>this.maximumHeight&&(this.maximumHeight=this.drawing[e].y),this.drawing[e].x>this.maximumWidth&&(this.maximumWidth=this.drawing[e].x)}),this.maximumHeight+=Math.max(this.offsetIncrementAS,this.offsetIncrementBM,this.offsetIncrementCT)}calculateDepth(){let e=new v(this.graph,this.graph.verticesAS),t=null;return e.vertices.forEach(i=>{i in e.inDegree||(t=i)}),this.calculateDepthWorker(e,t)}calculateDepthWorker(e,t){if(t in e.outDegree){let i=Number.NEGATIVE_INFINITY;return e.outDegree[t].forEach(s=>{let r=this.calculateDepthWorker(e,s);r>i&&(i=r)}),i+1}return 1}calculateParameter(){this.depth=this.calculateDepth()-1,0==this.rotation.rotateAngle||90==this.rotation.rotateAngle?(this.depthMultiplier=0==this.depth?this.properties.totalWidth/3:this.properties.totalWidth/3/this.depth,this.offsetCTBM=this.properties.totalWidth/3,this.xPositionCT=this.properties.totalWidth-this.offsetCTBM,this.xPositionBM=this.properties.totalWidth):(this.depthMultiplier=0==this.depth?.9*this.properties.heightDrawingDIV/3:.9*this.properties.heightDrawingDIV/3/this.depth,this.offsetCTBM=.9*this.properties.heightDrawingDIV/3,this.xPositionCT=.9*this.properties.heightDrawingDIV-this.offsetCTBM,this.xPositionBM=.9*this.properties.heightDrawingDIV),this.class==S.Containment?(this.offsetIncrementAS=this.properties.offsetIncrementTwoLines,this.offsetIncrementCT=2*this.offsetIncrementAS,this.offsetIncrementBM=this.properties.offsetIncrementTwoLines):(this.offsetIncrementCT=this.properties.offsetIncrementTwoLines,this.offsetIncrementBM=this.properties.offsetIncrementTwoLines,this.offsetIncrementAS=this.properties.offsetIncrementTwoLines)}feasibleClippingCT(){return this.graph.verticesCT.length>0&&this.graph.verticesBM.length>0}applyLinearMap(e,t){let i=new Ue(this.drawing,e);e.rotate&&(this.maximumHeight=i.maxY+30,this.maximumWidth=i.maxX+30),(e.rotate&&180==e.rotateAngle||e.rotate&&270==e.rotateAngle)&&this.rotateAngle(-90,t)}}var S=(()=>{return(o=S||(S={}))[o.Partial=0]="Partial",o[o.Subgraph=1]="Subgraph",o[o.Exploration=2]="Exploration",o[o.Containment=3]="Containment",S;var o})();class X{constructor(e,t,i){this.graph=e,this.layout=t,this.properties=i,this.graphStyle=new Fe(t.maximumHeight,t.maximumWidth,!0,i),this.vertexPosition=t.drawing}exportSpecification(e){let a,t=JSON.parse(JSON.stringify(Xe)),i=[],s=[],r=[],n=[];return a=this.graphStyle.darkMode?"white":"black",this.applyLayoutSpecifics(n),this.processGraph(i,s,r,a),t.data[0].values=i,t.data[1].values=s,t.data[2].values=n,t.data[3].values=r,e?this.graphStyle.exportSpezificationAnimation(t,this.layout):this.graphStyle.exportSpezification(t,this.layout)}applyLayoutSpecifics(e){switch(this.layout.class){case S.Partial:case S.Subgraph:case S.Exploration:break;case S.Containment:this.processContainment(e)}}formatLabelTwoLines(e,t){let i=e.vertexLabel[t];if("string"==typeof i){let s=i.split(" "),r="",n="",a=0;return s.forEach(l=>{a>i.length/3?n=n+" "+l:r=r+" "+l,a+=l.length}),n.length>0?[r,n]:[r]}return i}processContainment(e){this.layout.rects.length>0&&this.layout.rects.forEach(t=>{e.push({x:t.positionX,y:t.positionY,w:t.width,h:t.height})})}processGraph(e,t,i,s){this.graph.vertices.forEach(r=>{r in this.vertexPosition||console.log("IDDDD",r,console.log(this.graph.vertexType[r]));const n=this.vertexPosition[r];let l=this.calculateVertexLabel(r);this.graph.vertexLabel[r]=l;let h,c=this.graph.vertexSize[r];h=this.graphStyle.darkMode?"#fff":"#000",this.layout.class==S.Containment&&(this.graph.vertexType[r]==u.CT||this.graph.vertexType[r]==u.AS)&&"black"==this.graph.vertexColor[r]&&(h=this.graphStyle.darkMode?"#000":"#fff");let f=this.calculateLabelOffset(r),d=this.graph.vertexColor[r];this.graphStyle.darkMode&&"black"==d&&(d="white");let I,C,T=this.graph.vertexVisible[r];switch(I=0==this.layout.rotation.rotateAngle||90==this.layout.rotation.rotateAngle?0:270,this.graph.vertexType[r]){case u.AS:C="Anatomical Structure";break;case u.CT:C="Cell Type";break;case u.BM:C="Biomarker"}e.push({id:r,x:n.x,y:n.y,color:d,label:l,visible:T,labelOffsetX:0,labelOffsetY:f,labelColor:h,vertexSize:c,vertexShape:"circle",vertexType:C,angle:I}),r in this.graph.outDegree&&this.graph.outDegree[r].forEach(J=>{let ee,ft=String(r)+"|"+String(J);ee=this.layout.highlightedEdge[ft]?1:.4,this.graph.vertexType[r]==u.AS&&this.graph.vertexType[J]==u.AS?t.push({source:r,target:J,color:s,opacity:ee}):i.push({source:r,target:J,color:s,opacity:ee})})})}calculateVertexLabel(e){let t,i=this.graph.vertexLabel[e],s=this.formatLabelTwoLines(this.graph,e);if(this.layout.class===S.Containment)switch(this.graph.vertexType[e]){case u.AS:case u.CT:t=s;break;case u.BM:t=i}else switch(this.graph.vertexType[e]){case u.AS:t=s;break;case u.CT:case u.BM:t=i}return t}calculateLabelOffset(e){let t,i=this.graph.vertexLabel[e];if(null==i)return 0;switch(this.layout.class){case S.Containment:this.graph.vertexType[e]===u.BM?t=this.properties.oneLineLabelOffset:(t=2==i.length?this.properties.twoLineLabelOffset:this.properties.oneLineLabelOffset,"black"==this.graph.vertexColor[e]&&(t=this.properties.collapsedCTLabelOffset));break;case S.Exploration:this.graph.vertexType[e]===u.AS?2==i.length?(t=this.properties.twoLineLabelOffset,this.graph.vertexSize[e]==this.properties.rootExplorationVertexSize&&(t=this.properties.rootExplorationTwoLineLabelOffset)):(t=this.properties.oneLineLabelOffset,this.graph.vertexSize[e]==this.properties.rootExplorationVertexSize&&(t=this.properties.rootExplorationOneLineLabelOffset)):t=this.properties.oneLineLabelOffset;break;default:t=2==i.length?this.properties.twoLineLabelOffset:this.properties.oneLineLabelOffset}return t}}var b=B(951);class _e{constructor(){this.data=[],this.offset=0}getLength(){return this.data.length-this.offset}isEmpty(){return 0==this.data.length}enqueue(e){this.data.push(e)}dequeue(){if(0!=this.data.length){var e=this.data[this.offset];return 2*++this.offset>=this.data.length&&(this.data=this.data.slice(this.offset),this.offset=0),e}}peek(){return this.data.length>0?this.data[this.offset]:void 0}}class F{constructor(e,t,i){this.graph=e,this.queue=new _e,this.verticesNEW=[],this.visited=new Array(this.graph.numVertices).fill(!1),this.level=new Array(this.graph.numVertices).fill(-1),this.breathFirstSearch(t,i)}breathFirstSearch(e,t){for(this.visited[e]=!0,this.level[e]=0,this.verticesNEW.push(e),this.queue.enqueue(e);!this.queue.isEmpty();){let i=this.queue.dequeue();i in t&&t[i].forEach(r=>{this.visited[r]||(this.visited[r]=!0,this.level[r]=this.level[i]+1,this.queue.enqueue(r),this.verticesNEW.push(r))})}}createLevels(){let e=[];return this.verticesNEW.forEach(t=>{let i=this.level[t];-1!=i&&void 0!==i&&(void 0===e[i]?e.push([t]):e[i].push(t))}),e}reachable(){let e=[];return this.verticesNEW.forEach(t=>{let i=this.level[t];-1!=i&&void 0!==i&&e.push([t])}),e}}class O{constructor(e){let t=this.calculatePossibleRoots(e),i=new v(e,e.verticesAS);this.leaves=[],t.forEach(s=>{this.worker(s,i)})}worker(e,t){e in t.outDegree?t.outDegree[e].forEach(s=>{this.worker(s,t)}):this.leaves.push(e)}calculatePossibleRoots(e){let t=[];return e.verticesAS.forEach(i=>{i in e.inDegree||t.push(i)}),t}}class k{constructor(e,t,i){this.graph=e,this.fixedVertices=t,this.freeVertices=i,this.fixedIndex=new Map,this.groups=new Map,this.slots=[],this.createIndexMap(t),this.createGroups(e.inDegree),this.createSlots()}createIndexMap(e){for(let t=0;t<e.length;t++)this.fixedIndex[e[t]]=t}createSlots(){for(const[e,t]of Object.entries(this.groups))t.forEach(i=>{this.slots.push(i)})}createGroups(e){this.freeVertices.forEach(t=>{let i=this.medianAssessment(t,e);i in this.groups?this.groups[i].push(t):this.groups[i]=[t]})}medianAssessment(e,t){if(!(e in t))return-1;{let s=[];if(t[e].forEach(r=>{s.push(this.fixedIndex[r])}),s.length>1){s.sort((n,a)=>n-a);let r=Math.floor(s.length/2);return s[r]}if(1==s.length)return s[0]}}}class ce{constructor(e,t,i,s,r){this.offsetsX=[],this.nextsOffset=r,this.depthMultiplier=s,this.nextConnnectedComponentOffset=0,this.maximumX=0;let n=new v(e,e.verticesAS),l=new O(e).leaves,c=this.calculatePossibleRoots(e);this.neighbourMAP=new Map;let h=0;l.forEach(g=>{if(g in e.outDegree){let f=0;e.outDegree[g].forEach(d=>f+=t[d].y),f/=e.outDegree[g].length,t[g]=new m.S(i*s+50,f),h=f}else t[g]=new m.S(i*s+50,h+r),h+=r}),this.maintainMinimumDistanceAS(l,t,r),c.forEach(g=>{this.nextYonLayer=[],this.setup(g,0,e,n,t),this.nextConnnectedComponentOffset=this.nextYonLayer[this.nextYonLayer.length-1];let f=(this.nextYonLayer.length-1)*this.depthMultiplier;f>this.maximumX&&(this.maximumX=f)})}calculatePossibleRoots(e){let t=[];return e.verticesAS.forEach(i=>{i in e.inDegree||t.push(i)}),t}setup(e,t,i,s,r){void 0===this.nextYonLayer[t]&&this.nextYonLayer.push(this.nextConnnectedComponentOffset);let a,n=t*this.depthMultiplier+50;if(e in s.outDegree){let l=s.outDegree[e];l.forEach(c=>{this.setup(c,t+1,i,s,r)}),a=1==l.length?r[l[0]].y:(r[l[0]].y+r[l[l.length-1]].y)/2,r[e]=new m.S(n,a)}this.nextYonLayer[t]=this.nextYonLayer[t]+this.nextsOffset}maintainMinimumDistanceAS(e,t,i){if(e.length>0){let s=t[e[0]].y;for(let r=1;r<e.length;r++){let n=e[r],a=e[r-1],l=t[n];if(l.y-s<i){let h=s+i;s=h,t[n]=new m.S(t[a].x,h)}else s=l.y}this.maximumY=s}}}class ie{constructor(e,t,i){this.layout=e,this.averageSpacingCT(t,i),this.maintainMinimumDistanceCT(t)}calculateNeighborYMean(e){let t=0;if(e in this.layout.graph.outDegree){let i=0;return this.layout.graph.outDegree[e].forEach(s=>{this.layout.graph.vertexType[s]==u.BM&&1==this.layout.graph.inDegree[s].length&&(t+=this.layout.drawing[s].y,i+=1)}),0!==i?t/i:-1}return-1}averageSpacingCT(e,t){e.forEach(i=>{let s=this.calculateNeighborYMean(i);if(-1==s){let r=new m.S(this.layout.xPositionCT,t+this.layout.offsetIncrementCT);t=r.y,this.layout.drawing[i]=r}else{let r=new m.S(this.layout.xPositionCT,s);t=r.y,this.layout.drawing[i]=r}})}maintainMinimumDistanceCT(e){if(e.length>0){let t=this.layout.drawing[e[0]].y;for(let i=1;i<e.length;i++){let s=e[i],r=e[i-1],n=this.layout.drawing[s];if(n.y-t<this.layout.offsetIncrementCT){let l=t+this.layout.offsetIncrementCT;t=l,this.layout.drawing[s]=new m.S(this.layout.drawing[r].x,l)}else t=n.y}this.finalOffset=t+this.layout.offsetIncrementCT}}}class qe extends Q{constructor(e,t,i,s){super(e,i,s),this.class=S.Partial;let r=new O(e),n=r.leaves;this.calculateDepth(),this.calculateParameter();let l=new k(e,n,e.verticesCT);this.slotsCT=l.slots;let c=new k(e,this.slotsCT,e.verticesBM);if(this.slotsBM=c.slots,this.drawCellTypes(this.slotsCT),this.graph.verticesBM.length>0){let g=this.calculateMinY();this.slotsBM.forEach(d=>{let T=new m.S(this.xPositionBM,g);g+=this.offsetIncrementBM,this.drawing[d]=T}),new ie(this,this.slotsCT,this.offsetIncrementCT)}new ce(e,this.drawing,this.depth,this.depthMultiplier,this.offsetIncrementAS),this.calculateWidthHeight(),this.applyLinearMap(i,r),this.updateHighlights(t)}updateHighlights(e){e in this.graph.outDegree&&this.graph.outDegree[e].forEach(t=>{this.updateHighlights(t);let i=String(e)+"|"+String(t);this.highlightedEdge[i]=1})}calculateMinY(){let e=Number.POSITIVE_INFINITY;return this.graph.verticesBM.forEach(t=>{t in this.graph.inDegree&&this.graph.inDegree[t].forEach(i=>{this.drawing[i].y<e&&(e=this.drawing[i].y)})}),e}calculateRoot(e){let t=null;return e.vertices.forEach(i=>{i in e.inDegree||(t=i)}),t}drawCellTypes(e){let t=this.properties.heightTopPadding;e.forEach(i=>{let s=new m.S(this.xPositionCT,t);t+=this.offsetIncrementCT,this.drawing[i]=s})}drawBiomarkers(e){let t=this.properties.heightTopPadding;e.forEach(i=>{let s=new m.S(this.xPositionBM,t);t+=this.offsetIncrementBM,this.drawing[i]=s})}}class se{constructor(e,t,i,s,r){this.drawing=e,this.verticesToMove=i,this.ticks=r,this.animation=[];for(let n=1;n<r+1;n++){let a=new Map,l=1/r*n;Object.keys(e).forEach(c=>{a[c]=this.drawing[c]});for(let c=0;c<t.length;c++){let h=t[c],g=s[c],f=new m.S(h.x+(g.x-h.x)*l,h.y+(g.y-h.y)*l);a[i[c]]=f}this.animation.push(a)}}}class ${constructor(e){this.dummyID=-9e6,this.leafMap=new Map;let t=new v(e,e.verticesAS);t.vertices.forEach(s=>this.leafMap[s]=!1);let i=this.calculateRoot(t);this.leafWorker(i,t),this.postOrder(i,e)}calculateRoot(e){let t=null;return e.vertices.forEach(i=>{i in e.inDegree||(t=i)}),t}leafWorker(e,t){e in t.outDegree?t.outDegree[e].forEach(i=>{this.leafWorker(i,t)}):this.leafMap[e]=!0}postOrder(e,t){if(e in t.outDegree){let i=[];t.outDegree[e].forEach(s=>{switch(t.vertexType[s]){case u.AS:this.postOrder(s,t);break;case u.CT:this.leafMap[e]||i.push(s)}}),i.length>0&&this.extendGraph(t,e,i)}}extendGraph(e,t,i){this.dummyID-=1,e.verticesAS.push(this.dummyID),e.vertices.push(this.dummyID),e.numVertices+=1,e.numVerticesAS+=1,e.vertexType[this.dummyID]=u.AS,e.vertexColor[this.dummyID]="red",e.vertexLabel[this.dummyID]="",e.vertexVisible[this.dummyID]=0,e.vertexSize[this.dummyID]=300,i.forEach(s=>{this.removeByValue(s,e.outDegree[t]),this.removeByValue(t,e.inDegree[s]),e.inDegree[s].push(this.dummyID)}),e.outDegree[this.dummyID]=i,e.outDegree[t].push(this.dummyID),e.inDegree[this.dummyID]=[t]}removeByValue(e,t){let i=t.indexOf(e);-1!=i&&t.splice(i,1)}}class ue{constructor(e,t,i,s){this.sourceID=e,this.middleID=t,this.targetID=i,this.endpointID=s,this.edge={source:e,target:i}}}class Z{constructor(e){this.bends=[],this.bendCount=-1,this.depth=Number.NEGATIVE_INFINITY;let t=new v(e,e.verticesAS);this.calculatePossibleRoots(e).forEach(s=>{this.treeAugmentation(s,e,t)}),this.processBends(e,t)}treeAugmentation(e,t,i){let r=new F(i,e,i.outDegree).createLevels();this.depth<r.length&&(this.depth=r.length);for(let n=0;n<r.length-1;n++)r[n].forEach(l=>{if(!(l in i.outDegree)){let c=l;if(l in t.inDegree){let h=t.inDegree[l][0],g=[];h in i.outDegree&&(i.outDegree[h].forEach(d=>{d!=l&&g.push(d)}),i.outDegree[h]=g);let f=[];for(let d=n+1;d<r.length;d++)i.outDegree[this.bendCount]=[c],f.push(this.bendCount),c=this.bendCount,this.bendCount=this.bendCount-1;this.bends.push(new ue(h,f,l,l)),h in i.outDegree&&i.outDegree[h].push(c)}}})}processBends(e,t){this.bends.forEach(i=>{let s=i.middleID;s.forEach(n=>{e.vertices.push(n),e.verticesAS.push(n),e.numVertices+=1,e.numVerticesAS+=1,e.vertexType[n]=u.AS,e.vertexColor[n]="red",e.vertexLabel[n]=" ",e.vertexVisible[n]=0,e.vertexSize[n]=300});let r=i.targetID;s.forEach(n=>{n in e.outDegree?e.outDegree[n].push(r):e.outDegree[n]=[r],r in e.inDegree?e.inDegree[r].push(n):e.inDegree[r]=[n],r=n}),e.inDegree[s[s.length-1]]=[i.sourceID],e.outDegree[i.sourceID].push(s[s.length-1]),this.removeByValue(i.targetID,e.outDegree[i.sourceID]),this.removeByValue(i.sourceID,e.inDegree[i.targetID])})}removeByValue(e,t){let i=t.indexOf(e);t.splice(i,1)}calculatePossibleRoots(e){let t=[];return e.verticesAS.forEach(i=>{i in e.inDegree||t.push(i)}),t}}class pe{constructor(e){this.graph=e,this.treeAS=new v(e,e.verticesAS),this.counter=1,this.subtreeMap=new Map;let t=this.calculateRoot();this.calculateSubtreeMap(t),this.artificialCTID=-2e5,this.artificialBMID=-75e4,this.replicateCTBM()}replicateCTBM(){this.graph.verticesCT.forEach(e=>{if(e in this.graph.inDegree){let t=new Map;this.graph.inDegree[e].forEach(s=>{let r=this.subtreeMap[s];r in t?t[r].push(s):t[r]=[s]});let i=!0;for(const[s,r]of Object.entries(t))i?i=!1:this.augment(e,r)}})}augment(e,t){this.graph.vertices.push(this.artificialCTID),this.graph.verticesCT.push(this.artificialCTID),this.graph.numVertices+=1,this.graph.numVerticesCT+=1,this.graph.vertexType[this.artificialCTID]=u.CT,this.graph.vertexVisible[this.artificialCTID]=1,this.graph.vertexSize[this.artificialCTID]=this.graph.vertexSize[e],this.graph.vertexLabel[this.artificialCTID]=this.graph.vertexLabel[e],this.graph.vertexColor[this.artificialCTID]=this.graph.vertexColor[e],this.graph.IDtoOntologyType[this.artificialCTID]=this.graph.IDtoOntologyType[e],this.graph.IDtoOntologyID[this.artificialCTID]=this.graph.IDtoOntologyID[e],t.forEach(i=>{this.graph.inDegree[this.artificialCTID]=[i],this.graph.outDegree[i].push(this.artificialCTID),this.removeByValue(i,this.graph.inDegree[e]),this.removeByValue(e,this.graph.outDegree[i])}),e in this.graph.outDegree&&this.augmentBM(this.graph.outDegree[e]),this.artificialCTID-=1}augmentBM(e){let t=[];for(let i=0;i<e.length;i++){let s=e[i];t.push(this.artificialBMID),this.graph.vertices.push(this.artificialBMID),this.graph.verticesBM.push(this.artificialBMID),this.graph.vertexVisible[this.artificialBMID]=1,this.graph.vertexColor[this.artificialBMID]=this.graph.vertexColor[s],this.graph.IDtoOntologyType[this.artificialBMID]=this.graph.IDtoOntologyType[s],this.graph.IDtoOntologyID[this.artificialBMID]=this.graph.IDtoOntologyID[s],this.graph.vertexSize[this.artificialBMID]=this.graph.vertexSize[s],this.graph.numVertices+=1,this.graph.numVerticesBM+=1,this.graph.vertexType[this.artificialBMID]=u.BM,this.graph.vertexLabel[this.artificialBMID]=this.graph.vertexLabel[s],this.artificialBMID-=1}t.forEach(i=>{i in this.graph.inDegree?this.graph.inDegree[i].push(this.artificialCTID):this.graph.inDegree[i]=[this.artificialCTID],this.artificialCTID in this.graph.outDegree?this.graph.outDegree[this.artificialCTID].push(i):this.graph.outDegree[this.artificialCTID]=[i]})}removeByValue(e,t){let i=t.indexOf(e);-1!=i&&t.splice(i,1)}calculateRoot(){let e=-1;return this.treeAS.vertices.forEach(t=>{t in this.treeAS.inDegree||(e=t)}),e}calculateSubtreeMap(e){return e in this.treeAS.outDegree?(this.treeAS.outDegree[e].forEach(t=>{this.calculateSubtreeMap(t)||(this.counter+=1)}),!1):(this.subtreeMap[e]=this.counter,!0)}}class fe{constructor(e){let t=new v(e,e.verticesAS),i=this.calculateRoot(t),s=new O(e),r=new k(e,s.leaves,e.verticesCT);this.slotsCT=r.slots,this.slotIndexMap=new Map,this.calculateIndexMap(),this.hasLeaf=new Map,this.calculateLeafMap(i,e,t),this.heuristicAS=new Map,this.calculateASHeuristic(i,e,t),this.balancing(i,e,t)}calculateIndexMap(){for(let e=0;e<this.slotsCT.length;e++)this.slotIndexMap[this.slotsCT[e]]=e}balancing(e,t,i){if(e in i.outDegree){let s=[],r=[],n=!1;return i.outDegree[e].forEach(a=>{this.hasLeaf[a]?s.push(a):r.push(a),n=this.balancing(a,t,i)}),n?this.leafProcessing(e,t):t.outDegree[e].sort((a,l)=>this.heuristicAS[a]-this.heuristicAS[l]),!1}return!0}leafProcessing(e,t){let i=[],s=[];t.outDegree[e].forEach(r=>{this.hasLeaf[r]?i.push(r):s.push(r)}),i.sort((r,n)=>this.medianSlotHeuristic(r,t)-this.medianSlotHeuristic(n,t)),t.outDegree[e]=i.concat(s)}medianSlotHeuristic(e,t){let i=[];return t.outDegree[e].forEach(s=>{i.push(this.slotIndexMap[s])}),this.calculateMedian(i)}calculateMedian(e){return 1==e.length?e[0]:0==e.length?0:(e.sort((i,s)=>i-s),e[Math.floor(e.length/2)])}calculateY(e,t,i){let s=0;return e.outDegree[i].forEach(r=>s+=t[r].y),s/e.outDegree[i].length}calculateASHeuristic(e,t,i){if(e in i.outDegree){let s=0;i.outDegree[e].forEach(r=>{this.calculateASHeuristic(r,t,i),s+=this.heuristicAS[r]}),this.heuristicAS[e]=s}else this.heuristicAS[e]=e in t.outDegree?-10:1}calculateRoot(e){let t=null;return e.vertices.forEach(i=>{i in e.inDegree||(t=i)}),t}calculateLeafMap(e,t,i){if(e in i.outDegree){let s=!1;i.outDegree[e].forEach(r=>{this.calculateLeafMap(r,t,i),this.hasLeaf[r]&&(s=!0)}),this.hasLeaf[e]=s}else this.hasLeaf[e]=e in t.outDegree}}class ge{constructor(e){this.graph=e,this.subtreeMap=new Map,this.treeAS=new v(e,e.verticesAS),this.counter=1;let t=this.calculateRoot();this.calculateSubtreeMap(t),this.artificialBMID=-85e4,this.replicateBM()}calculateRoot(){let e=-1;return this.treeAS.vertices.forEach(t=>{t in this.treeAS.inDegree||(e=t)}),e}calculateSubtreeMap(e){return e in this.treeAS.outDegree?(this.treeAS.outDegree[e].forEach(t=>{this.calculateSubtreeMap(t)||(this.counter+=1)}),!1):(this.subtreeMap[e]=this.counter,e in this.graph.outDegree&&this.graph.outDegree[e].forEach(t=>this.subtreeMap[t]=this.counter),!0)}replicateBM(){this.graph.verticesBM.forEach(e=>{if(e in this.graph.inDegree){let t=new Map;this.graph.inDegree[e].forEach(s=>{let r=this.subtreeMap[s];r in t?t[r].push(s):t[r]=[s]});let i=!0;for(const[s,r]of Object.entries(t))i?i=!1:this.augment(e,r)}})}augment(e,t){this.graph.vertices.push(this.artificialBMID),this.graph.verticesBM.push(this.artificialBMID),this.graph.numVertices+=1,this.graph.numVerticesBM+=1,this.graph.vertexType[this.artificialBMID]=u.BM,this.graph.vertexLabel[this.artificialBMID]=this.graph.vertexLabel[e],this.graph.IDtoOntologyType[this.artificialBMID]=this.graph.IDtoOntologyType[e],this.graph.IDtoOntologyID[this.artificialBMID]=this.graph.IDtoOntologyID[e],this.graph.vertexSize[this.artificialBMID]=this.graph.vertexSize[e],this.graph.vertexVisible[this.artificialBMID]=1,this.graph.vertexColor[this.artificialBMID]=this.graph.vertexColor[e],t.forEach(i=>{this.graph.outDegree[i].push(this.artificialBMID),this.artificialBMID in this.graph.inDegree?this.graph.inDegree[this.artificialBMID].push(i):this.graph.inDegree[this.artificialBMID]=[i]}),t.forEach(i=>{this.removeByValue(i,this.graph.inDegree[e]),this.removeByValue(e,this.graph.outDegree[i])}),this.artificialBMID-=1}removeByValue(e,t){let i=t.indexOf(e);-1!=i&&t.splice(i,1)}}class Ke{constructor(e,t){this.source=e,this.target=t}}class re{constructor(e,t,i){let r=new k(t,e,t.verticesBM).slots;this.createIndexMapCT(e),this.createIndexMapBMCT(e,r,t.inDegree),this.calculateReplacements(e,r,i,t.inDegree,t.outDegree),this.update(t),this.calculateSlots(r)}calculateSlots(e){this.newSlotsBM=e.slice(0),this.replacements.forEach(t=>{this.newSlotsBM.push(t.newBM)})}deepClone(e,t,i,s,r){i.verticesAS.forEach(n=>{n in t&&(e[n]=t[n].slice(0))}),s.forEach(n=>{n in t&&(e[n]=t[n].slice(0))}),r.forEach(n=>{n in t&&(e[n]=t[n].slice(0))})}update(e){this.replacements.forEach(t=>{e.vertices.push(t.newBM),e.verticesBM.push(t.newBM),e.numVertices+=1,e.numVerticesBM+=1,e.vertexType[t.newBM]=u.BM,e.vertexLabel[t.newBM]=e.vertexLabel[t.originalBM],e.IDtoOntologyType[t.newBM]=e.IDtoOntologyType[t.originalBM],e.IDtoOntologyID[t.newBM]=e.IDtoOntologyID[t.originalBM],e.vertexSize[t.newBM]=e.vertexSize[t.originalBM],e.vertexVisible[t.newBM]=1,e.vertexColor[t.newBM]=e.vertexColor[t.originalBM],e.inDegree[t.newBM]=[t.originalCT],e.outDegree[t.originalCT].push(t.newBM),this.removeByValue(t.originalCT,e.inDegree[t.originalBM]),this.removeByValue(t.originalBM,e.outDegree[t.originalCT])})}createIndexMapCT(e){this.indexMapCT=new Map;for(let t=0;t<e.length;t++)this.indexMapCT[e[t]]=t}createIndexMapBMCT(e,t,i){this.indexMapBMCT=new Map,t.forEach(s=>{this.indexMapBMCT[s]=s in i?this.calculateCTGroupMean(i[s]):Number.POSITIVE_INFINITY})}calculateCTGroupMean(e){if(e.length>0){let t=0;return e.forEach(i=>{t+=this.indexMapCT[i]}),t/e.length}return 0}replacementEdgeHierarchy(e,t){let i=[];return e.forEach(s=>{s in t&&t[s].forEach(n=>{i.push(new Ke(s,n))})}),i.sort((s,r)=>Math.abs(this.indexMapCT[r.source]-this.indexMapBMCT[r.target])-Math.abs(this.indexMapCT[s.source]-this.indexMapBMCT[s.target])),i}calculateReplacements(e,t,i,s,r){this.replacements=[],this.replacementsMap=new Map,t.forEach(l=>{this.replacementsMap[l]=l in s?s[l].length:0});let n=-1e5,a=this.replacementEdgeHierarchy(e,r);if(i>0){let l=a.length*(i/100),c=0;a.forEach(h=>{this.replacementsMap[h.target]>1&&c<l&&(this.replacements.push(new Qe(h.source,h.target,n)),this.replacementsMap[h.target]=this.replacementsMap[h.target]-1,n-=1,c+=1)})}}removeByValue(e,t){let i=t.indexOf(e);t.splice(i,1)}}class Qe{constructor(e,t,i){this.originalCT=e,this.originalBM=t,this.newBM=i}}class $e{constructor(e,t,i,s,r,n,a){this.drawing=new Map,this.graph=new v(e,e.vertices),this.biomarkerX=s,this.cellTypeX=r,this.angleThreshold=55,this.feasible=!0,this.augment(i,t),this.draw(a,n),this.isFeasible()}isFeasible(){this.graph.verticesCT.forEach(e=>{e in this.graph.outDegree&&this.graph.outDegree[e].forEach(t=>{this.calculateAngle(this.drawing[e],this.drawing[t])>this.angleThreshold&&(this.feasible=!1)})})}augment(e,t){this.slotsCT=e;let i=new k(this.graph,this.slotsCT,this.graph.verticesBM);this.slotsBM=i.slots,new re(this.slotsCT,this.graph,t);let r=new k(this.graph,this.slotsCT,this.graph.verticesBM);this.slotsBM=r.slots}draw(e,t){let i=0;this.slotsBM.forEach(s=>{let r=new m.S(this.biomarkerX,i);i+=e,this.drawing[s]=r}),this.averageSpacingCT(this.slotsCT,0,t),this.maintainMinimumDistanceCT(this.slotsCT,t)}calculateNeighborYMean(e){let t=0;if(e in this.graph.outDegree){let i=0;return this.graph.outDegree[e].forEach(s=>{this.graph.vertexType[s]==u.BM&&1==this.graph.inDegree[s].length&&(t+=this.drawing[s].y,i+=1)}),0!==i?t/i:-1}return-1}averageSpacingCT(e,t,i){e.forEach(s=>{let r=this.calculateNeighborYMean(s);if(-1==r){let n=new m.S(this.cellTypeX,t+i);t=n.y,this.drawing[s]=n}else{let n=new m.S(this.cellTypeX,r);t=n.y,this.drawing[s]=n}})}maintainMinimumDistanceCT(e,t){if(e.length>0){let i=this.drawing[e[0]].y;for(let s=1;s<e.length;s++){let r=e[s],n=e[s-1],a=this.drawing[r];if(a.y-i<t){let c=i+t;i=c,this.drawing[r]=new m.S(this.drawing[n].x,c)}else i=a.y}}}calculateAngle(e,t){let i=Math.atan2(t.y-e.y,t.x-e.x)*(180/Math.PI);return Math.abs(i)}calculateLengthEdge(e,t){return Math.sqrt((t.x-e.x)*(t.x-e.x)+(t.y-e.y)*(t.y-e.y))}}class de{constructor(e,t,i,s,r,n){this.graph=e,this.binarySearch(t,i,s,r,n)}binarySearch(e,t,i,s,r){let n=0,a=100;for(;n<=a;){let l=Math.floor(n+(a-n)/2);if(a==l)break;new $e(this.graph,l,e,t,i,s,r).feasible?a=l:n=l+1}this.parameterReplication=a}}class Ze extends j{constructor(e){super(e,"Partial"),this.previousDrawing=new Map,this.frames=10,this.frameTime=800}renderRestoreGraphContext(){return this.currentView=null,this.render(this.lastClick)}initializeGraph(){let e=this.controller.graphs[this.controller.currentOrgan];this.augmentedGraph=new v(e,e.vertices),new $(this.augmentedGraph),new Z(this.augmentedGraph),new pe(this.augmentedGraph),new fe(this.augmentedGraph),new ge(this.augmentedGraph);let a=new O(this.augmentedGraph),c=new k(this.augmentedGraph,a.leaves,this.augmentedGraph.verticesCT).slots,h=this.controller.properties.totalWidth,C=new de(this.augmentedGraph,c,h,h-h/3,this.controller.properties.offsetIncrementTwoLines,this.controller.properties.offsetIncrementTwoLines);new re(c,this.augmentedGraph,C.parameterReplication)}calculateLayoutGraph(e){let t=this.augmentedGraph.verticesAS.slice(0).concat(this.augmentedGraph.verticesCT.slice(0));if(null!=e){let s=new F(this.augmentedGraph,e,this.augmentedGraph.outDegree).createLevels();t=t.concat(s[s.length-1]);let r=s[s.length-2],n=new v(this.augmentedGraph,t);return n.verticesCT.forEach(a=>{a in n.outDegree&&!r.includes(a)&&(n.outDegree[a].forEach(l=>{this.removeByValue(a,n.inDegree[l])}),delete n.outDegree[a])}),this.lastClick=e,n}return new v(this.augmentedGraph,t)}renderRestoreViewContext(){this.render(null!=this.lastClick?this.lastClick:null)}render(e){if(this.controller.graphs[this.controller.currentOrgan].ready){this.firstTime&&this.initializeGraph();let i=this.calculateLayoutGraph(e);return this.renderPartial(i,e).then(()=>this.firstTime=!1).then()}return null}renderPartial(e,t){let s=new qe(e,t,new N(this.controller.gui.selectedRotation),this.controller.properties),r=new X(e,s,this.controller.properties);this.setGraph2DParameter(r);let a,n=r.exportSpecification(!1);return null!=this.currentView?this.animation(e,s,r):(a=new b.G7x(b.Qc3(n)).renderer("svg").initialize(document.querySelector("#drawing")).addEventListener("click",(l,c)=>this.displayBM(l,c)).addEventListener("mouseover",(l,c)=>this.toolTip.compute(l,c,e)),this.currentView=a,this.setBackground(this.currentView),this.currentView.runAsync().then(()=>this.previousDrawing=s.drawing).then())}animationTick(e,t,i,s){if(e==t.animation.length-1){this.setGraph2DParameter(i);let r=i.exportSpecification(!1),n=new b.G7x(b.Qc3(r)).renderer("svg").initialize(document.querySelector("#drawing")).addEventListener("click",(a,l)=>this.displayBM(a,l)).addEventListener("mouseover",(a,l)=>this.toolTip.compute(a,l,s));return this.updateView(n,this.currentView),this.currentView=n,this.setBackground(this.currentView),this.currentView.runAsync()}{i.graphStyle.labelEnabled=!1;let r=i.exportSpecification(!0),n=new b.G7x(b.Qc3(r)).renderer("svg").initialize(document.querySelector("#drawing"));return this.updateView(n,this.currentView),this.currentView=n,this.setBackground(this.currentView),this.currentView.runAsync()}}animation(e,t,i){let s=this.calculateVertices2Move(e,t.drawing,this.previousDrawing),r=new se(t.drawing,this.calculateSourcePoints(s,this.previousDrawing),s,this.calculateTargetPoints(s,t.drawing),this.frames),n=[];for(let a=0;a<this.frames;a++)setTimeout(()=>{i.vertexPosition=r.animation[a],n.push(this.animationTick(a,r,i,e))},this.frameTime);return Promise.all(n).then()}removeByValue(e,t){let i=t.indexOf(e);-1!=i&&t.splice(i,1)}displayBM(e,t){if(null!=e&&null!=t&&null!=t.datum){let i=t.datum.id;this.augmentedGraph.verticesBM.includes(i)||this.render(i)}}reset(){this.firstTime=!0,this.lastClick=null,this.currentView=null}calculateSourcePoints(e,t){let i=[];return e.forEach(s=>i.push(t[s])),i}calculateTargetPoints(e,t){let i=[];return e.forEach(s=>i.push(t[s])),i}calculateVertices2Move(e,t,i){let s=[];return e.verticesCT.forEach(r=>{r in i&&r in t&&(i[r].x!=t[r].x||i[r].y!=t[r].y)&&s.push(r)}),s}}class me extends Q{constructor(e,t,i){super(e,t,i),this.class=S.Subgraph,new $(e),new Z(e),this.calculateParameter(),new pe(e),new fe(e);let l=new O(e),h=new k(e,l.leaves,e.verticesCT).slots,f=(new ge(e),new de(e,h,this.xPositionBM,this.xPositionCT,this.offsetIncrementCT,this.offsetIncrementBM)),I=(new re(h,e,f.parameterReplication),new k(e,h,this.graph.verticesBM).slots);this.drawBiomarkers(I),this.drawCellTypes(h),new ce(e,this.drawing,this.depth,this.depthMultiplier,this.offsetIncrementAS),this.calculateWidthHeight(),this.applyLinearMap(t,l)}drawBiomarkers(e){let t=this.properties.heightTopPadding;e.forEach(i=>{let s=new m.S(this.xPositionBM,t);t+=this.offsetIncrementBM,this.drawing[i]=s})}drawCellTypes(e){let t=this.properties.heightTopPadding;this.feasibleClippingCT()?new ie(this,e,t):e.forEach(i=>{let s=new m.S(this.xPositionCT,t);t+=this.offsetIncrementCT,this.drawing[i]=s})}}class ve extends j{constructor(e){super(e,"Subgraph"),this.currentString="",this.lastID=null}renderRestoreViewContext(){this.firstTime=!1,this.render(null)}renderRestoreGraphContext(){return this.firstTime=!0,this.render(null)}render(e){let t=this.controller.graphs[this.controller.currentOrgan];if(t.ready){let i=new v(t,t.vertices);return this.renderSubgraph(i)}return Promise.reject()}renderSubgraph(e){let i=new me(e,new N(this.controller.gui.selectedRotation),this.controller.properties),s=new X(e,i,this.controller.properties);this.setGraph2DParameter(s);let r=s.exportSpecification(!1),n=new b.G7x(b.Qc3(r)).renderer("svg").initialize(document.querySelector("#drawing")).addEventListener("mouseover",(a,l)=>this.toolTip.compute(a,l,e));return this.firstTime||this.updateView(n,this.currentView),this.currentView=n,this.setBackground(this.currentView),this.currentView.runAsync().then(()=>{this.firstTime=!1}).then()}processZoom(e,t){let i=Number.POSITIVE_INFINITY,s=Number.NEGATIVE_INFINITY,r=Number.POSITIVE_INFINITY,n=Number.NEGATIVE_INFINITY,a=this.currentView.scale("xscale"),l=this.currentView.scale("yscale");e.vertices.forEach(f=>{let d=t[f];a(d.x)<i&&(i=a(d.x)),a(d.x)>s&&(s=a(d.x)),l(d.y)<r&&(r=l(d.y)),l(d.y)>n&&(n=l(d.y))});let c=Math.max(Math.abs(s-i),withDrawingDIV),h=Math.max(Math.abs(n-r),heightDrawingDIV),g=this.currentView.signal("anchor");if(console.log("ANCHOR:",g,"XDOM: ",this.currentView.signal("xdom"),"YDOM",this.currentView.signal("ydom")),console.log(c,h,this.currentView.signal("xdom")),this.currentView.container().querySelector("svg").style.width=c+"px",this.currentView.container().querySelector("svg").style.height=h+"px",null!=this.lastWidth){let d=g[1]/this.lastHeight;this.currentView.container().querySelector("svg").scrollTop=-d}this.lastWidth=c,this.lastHeight=h}reset(){this.firstTime=!0,this.currentView=null}}class Je{constructor(e,t){this.bends=[],this.bendCount=-1,this.depth=Number.NEGATIVE_INFINITY,this.exploreThreshhold=t+1;let i=new v(e,e.verticesAS);this.calculatePossibleRoots(e).forEach(r=>{this.treeAugmentation(r,e,i)}),this.processBends(e,i)}treeAugmentation(e,t,i){let r=new F(i,e,i.outDegree).createLevels();this.depth<r.length&&(this.depth=r.length);for(let n=0;n<r.length-1;n++)r[n].forEach(l=>{if(!(l in i.outDegree)){let c=l;if(l in t.inDegree){let h=t.inDegree[l][0],g=[];h in i.outDegree&&(i.outDegree[h].forEach(d=>{d!=l&&g.push(d)}),i.outDegree[h]=g);let f=[];for(let d=n+1;d<Math.min(r.length,n+this.exploreThreshhold);d++)i.outDegree[this.bendCount]=[c],f.push(this.bendCount),c=this.bendCount,this.bendCount=this.bendCount-1;this.bends.push(new ue(h,f,l,l)),h in i.outDegree&&i.outDegree[h].push(c)}}})}processBends(e,t){this.bends.forEach(i=>{let s=i.middleID;s.forEach(n=>{e.vertices.push(n),e.verticesAS.push(n),e.numVertices+=1,e.numVerticesAS+=1,e.vertexType[n]=u.AS,e.vertexColor[n]="red",e.vertexLabel[n]=" ",e.vertexVisible[n]=0,e.vertexSize[n]=300});let r=i.targetID;s.forEach(n=>{n in e.outDegree?e.outDegree[n].push(r):e.outDegree[n]=[r],r in e.inDegree?e.inDegree[r].push(n):e.inDegree[r]=[n],r=n}),e.inDegree[s[s.length-1]]=[i.sourceID],e.outDegree[i.sourceID].push(s[s.length-1]),this.removeByValue(i.targetID,e.outDegree[i.sourceID]),this.removeByValue(i.sourceID,e.inDegree[i.targetID])})}removeByValue(e,t){let i=t.indexOf(e);t.splice(i,1)}calculatePossibleRoots(e){let t=[];return e.verticesAS.forEach(i=>{i in e.inDegree||t.push(i)}),t}}class et{constructor(e){this.dummyID=-9e6,this.leafMap=new Map;let t=new v(e,e.verticesAS);t.vertices.forEach(s=>this.leafMap[s]=!1);let i=this.calculateRoot(t);this.leafWorker(i,t),this.postOrder(i,e)}calculateRoot(e){let t=null;return e.vertices.forEach(i=>{i in e.inDegree||(t=i)}),t}leafWorker(e,t){e in t.outDegree?t.outDegree[e].forEach(i=>{this.leafWorker(i,t)}):this.leafMap[e]=!0}postOrder(e,t){if(e in t.outDegree){let i=[];t.outDegree[e].forEach(s=>{switch(t.vertexType[s]){case u.AS:this.postOrder(s,t);break;case u.CT:this.leafMap[e]||i.push(s)}}),i.length>0&&this.shrinkGraph(t,e,i)}}shrinkGraph(e,t,i){i.forEach(s=>{this.removeByValue(s,e.outDegree[t]),this.removeByValue(t,e.inDegree[s])})}removeByValue(e,t){let i=t.indexOf(e);-1!=i&&t.splice(i,1)}}class tt extends j{constructor(e){super(e,"Explore"),this.bfsThreshold=4,this.firstTime=!0,this.frames=25,this.frameTime=700}calculateLayoutGraph(e){(null==e||0==e)&&(this.root=1);let r,t=new F(this.originalGraph,this.root,this.originalGraph.outDegree),i=t.createLevels(),s=[];r=1==this.root?this.bfsThreshold-1:this.bfsThreshold;for(let h=0;h<Math.min(r,i.length);h++)i[h].forEach(g=>{s.push(g)});null!=this.previousGraph&&this.root in this.previousGraph.inDegree?s.push(this.previousGraph.inDegree[this.root][0]):this.root in this.originalGraph.inDegree&&this.originalGraph.inDegree[this.root].forEach(h=>{s.push(h)});let n=new v(this.originalGraph,s);new et(n),new Je(n,r),t=new F(n,this.root,n.outDegree),i=t.createLevels(),s=[];for(let h=0;h<Math.min(r,i.length);h++)i[h].forEach(g=>{s.push(g)});this.root in n.inDegree&&n.inDegree[this.root].forEach(h=>{s.push(h)});let c=new v(n,s);return c.vertices.forEach(h=>{c.vertexSize[h]=this.controller.properties.vertexSize}),c.inDegree[this.root].forEach(h=>{c.vertexColor[h]="black",c.vertexSize[h]=this.controller.properties.rootExplorationVertexSize}),this.previousGraph=c,c}renderRestoreGraphContext(){return this.currentView=null,null!=this.lastClick?this.render(this.lastClick).then():this.render(null).then()}renderRestoreViewContext(){this.render(null!=this.root?this.root:null)}render(e){return this.firstTime&&(this.originalGraph=this.controller.graphs[this.controller.currentOrgan]),this.firstTime=!1,this.controller.graphs[this.controller.currentOrgan].readyPromise.then(t=>{let i=this.calculateLayoutGraph(e);return null!=i?this.renderExplore(i):null})}renderExplore(e){let i=new me(e,new N(this.controller.gui.selectedRotation),this.controller.properties);i.class=S.Exploration;let s=new X(e,i,this.controller.properties);this.setGraph2DParameter(s);let r=s.exportSpecification(!1);if(null==this.currentView){let n=new b.G7x(b.Qc3(r)).renderer("svg").initialize(document.querySelector("#drawing")).addEventListener("click",(a,l)=>this.explore(a,l)).addEventListener("mouseover",(a,l)=>this.toolTip.compute(a,l,e));return this.currentView=n,this.setBackground(this.currentView),this.currentView.runAsync().then(()=>{this.previousDrawing=i.drawing}).then()}return this.animation(i,e,s).then(()=>this.previousDrawing=i.drawing).then()}animationTick(e,t,i,s){if(e==t.animation.length-1){this.setGraph2DParameter(i);let r=i.exportSpecification(!1),n=new b.G7x(b.Qc3(r)).renderer("svg").initialize(document.querySelector("#drawing")).addEventListener("click",(a,l)=>this.explore(a,l)).addEventListener("mouseover",(a,l)=>this.toolTip.compute(a,l,s));return this.updateView(n,this.currentView),this.currentView=n,this.setBackground(this.currentView),this.currentView.runAsync()}{i.graphStyle.labelEnabled=!1;let r=i.exportSpecification(!0),n=new b.G7x(b.Qc3(r)).renderer("svg").initialize(document.querySelector("#drawing"));return this.updateView(n,this.currentView),this.currentView=n,this.setBackground(this.currentView),this.currentView.runAsync()}}animation(e,t,i){let s=this.calculateVertices2Move(e.drawing,t),r=new se(e.drawing,this.calculateSourcePoints(s),s,this.calculateTargetPoints(s,e.drawing),this.frames),n=[];for(let a=0;a<this.frames;a++)setTimeout(()=>{i.vertexPosition=r.animation[a],n.push(this.animationTick(a,r,i,t))},this.frameTime);return Promise.all(n).then()}explore(e,t){if(null!=e&&null!=t){let i=t.datum.id;this.originalGraph.vertexType[i]!=u.BM&&(this.root=i,this.render(i)),this.lastClick=i}}reset(){this.firstTime=!0,this.root=1,this.previousGraph=null,this.currentView=null,this.lastClick=null}calculateSourcePoints(e){let t=[];return e.forEach(i=>t.push(this.previousDrawing[i])),t}calculateTargetPoints(e,t){let i=[];return e.forEach(s=>i.push(t[s])),i}calculateVertices2Move(e,t){let i=[];return t.vertices.forEach(s=>{s in this.previousDrawing&&s in e&&(this.previousDrawing[s].x!=e[s].x||this.previousDrawing[s].y!=e[s].y)&&i.push(s)}),i}}class ye{constructor(e,t,i,s,r,n){this.offsetsX=[],this.nextsOffset=r,this.depthMultiplier=n,this.nextConnnectedComponentOffset=s,this.maximumX=0,this.calculatePossibleRoots(e).forEach(l=>{this.nextYonLayer=[],this.setup(l,0,e,t,i),this.nextConnnectedComponentOffset=this.nextYonLayer[this.nextYonLayer.length-1];let c=(this.nextYonLayer.length-1)*this.depthMultiplier;c>this.maximumX&&(this.maximumX=c)})}calculatePossibleRoots(e){let t=[];return e.verticesAS.forEach(i=>{i in e.inDegree||t.push(i)}),t}setup(e,t,i,s,r){void 0===this.nextYonLayer[t]&&this.nextYonLayer.push(this.nextConnnectedComponentOffset);let a,n=t*this.depthMultiplier+50;if(e in s.outDegree&&s.outDegree[e].forEach(c=>{this.setup(c,t+1,i,s,r)}),e in s.outDegree){let l=s.outDegree[e];a=1==l.length?r[l[0]].y:(r[l[0]].y+r[l[l.length-1]].y)/2}else a=this.nextYonLayer[t];r[e]=new m.S(n,a),this.nextYonLayer[t]=this.nextYonLayer[t]+this.nextsOffset}}var ne=B(243);class it{constructor(e,t,i){this.containment=e,this.drawing=t,this.offset=50,this.rectangles=[],this.smallestWidth=window.screen.width/14,this.recursionSteps=0,this.recursionSteps=0,this.calculateHeight(this.containment.root,1),this.recursionSteps-=1,this.offsetCT=i,this.parseRectangles()}parseRectangles(){let e=this.containment.root;e in this.containment.outDegree&&this.containment.outDegree[e].forEach(t=>{this.worker(t,this.recursionSteps)})}worker(e,t){if(e in this.containment.outDegree){let i=this.workerSmallestY(e),s=this.workerLargestY(e),r=this.smallestWidth*Math.exp(t/this.recursionSteps),n=this.offsetCT/5/this.recursionSteps*t,a=i.x-r/2,l=Math.sqrt(window.screen.height*window.screen.height+window.screen.width*window.screen.width)/2,c=i.y-1.5*Math.sqrt(l)-n;this.rectangles.push(new ne.A(a,c,r,s.y-i.y+(i.y-c)+this.offsetCT/2.5/this.recursionSteps*t)),this.containment.outDegree[e].forEach(d=>{this.worker(d,t-1)})}}workerSmallestY(e){if(e in this.containment.outDegree){let t=new m.S(Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY);return this.containment.outDegree[e].forEach(i=>{let s=this.workerSmallestY(i);s.y<t.y&&(t=s)}),t}return this.drawing[e]}workerLargestY(e){if(e in this.containment.outDegree){let t=new m.S(Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY);return this.containment.outDegree[e].forEach(i=>{let s=this.workerLargestY(i);s.y>t.y&&(t=s)}),t}return this.drawing[e]}calculateHeight(e,t){e in this.containment.outDegree?this.containment.outDegree[e].forEach(i=>{this.calculateHeight(i,t+1)}):t>this.recursionSteps&&(this.recursionSteps=t)}}class st{constructor(e,t){let i=new v(e,e.verticesAS),s=this.calculateRoot(i);this.hasLeaf=new Map,this.idMapCT=new Map,this.heuristicAS=new Map,this.calculateLeafMap(s,e,i),this.initializeCTMap(t),this.calculateASHeuristic(s,e,i),this.balancing(s,e,i)}balancing(e,t,i){if(e in i.outDegree){let s=[],r=[];i.outDegree[e].forEach(n=>{this.hasLeaf[n]?s.push(n):r.push(n),this.balancing(n,t,i)}),s.sort((n,a)=>this.heuristicAS[n]-this.heuristicAS[a]),t.outDegree[e]=s.concat(r)}}calculateMedian(e){return 1==e.length?e[0]:0==e.length?0:(e.sort((i,s)=>i-s),e[Math.floor(e.length/2)])}calculateASHeuristic(e,t,i){let s=[];e in i.outDegree?i.outDegree[e].forEach(r=>{this.calculateASHeuristic(r,t,i),s.push(this.heuristicAS[r])}):e in t.outDegree&&t.outDegree[e].forEach(r=>{s.push(this.idMapCT[r])}),this.heuristicAS[e]=this.calculateMedian(s)}initializeCTMap(e){for(let t=0;t<e.length;t++)this.idMapCT[e[t]]=t}calculateRoot(e){let t=null;return e.vertices.forEach(i=>{i in e.inDegree||(t=i)}),t}calculateLeafMap(e,t,i){if(e in i.outDegree){let s=!1;i.outDegree[e].forEach(r=>{this.calculateLeafMap(r,t,i),this.hasLeaf[r]&&(s=!0)}),this.hasLeaf[e]=s}else this.hasLeaf[e]=e in t.outDegree}}class rt{constructor(e,t,i,s){this.containment=e,this.drawing=t,this.offset=50,this.rectangles=[],this.properties=s,this.smallestWidth=this.properties.heightDrawingDIV/14,this.recursionSteps=0,this.recursionSteps=0,this.calculateHeight(this.containment.root,1),this.recursionSteps-=1,this.offsetCT=i,this.parseRectangles()}parseRectangles(){let e=this.containment.root;e in this.containment.outDegree&&this.containment.outDegree[e].forEach(t=>{this.worker(t,this.recursionSteps)})}worker(e,t){if(e in this.containment.outDegree){let i=this.workerSmallestX(e),s=this.workerLargestX(e),r=this.offsetCT/2.5/this.recursionSteps*t,n=this.smallestWidth*Math.exp(t/this.recursionSteps),l=i.x+this.properties.twoLineLabelOffset-r;r=this.offsetCT/2.5/this.recursionSteps*t,this.rectangles.push(new ne.A(l,i.y-n/2,s.x-i.x+(i.x-l)+r,n)),this.containment.outDegree[e].forEach(f=>{this.worker(f,t-1)})}}workerSmallestX(e){if(e in this.containment.outDegree){let t=new m.S(Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY);return this.containment.outDegree[e].forEach(i=>{let s=this.workerSmallestX(i);s.x<t.x&&(t=s)}),t}return this.drawing[e]}workerSmallestY(e){if(e in this.containment.outDegree){let t=new m.S(Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY);return this.containment.outDegree[e].forEach(i=>{let s=this.workerSmallestY(i);s.y<t.y&&(t=s)}),t}return this.drawing[e]}workerLargestX(e){if(e in this.containment.outDegree){let t=new m.S(Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY);return this.containment.outDegree[e].forEach(i=>{let s=this.workerLargestX(i);s.x>t.x&&(t=s)}),t}return this.drawing[e]}workerLargestY(e){if(e in this.containment.outDegree){let t=new m.S(Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY);return this.containment.outDegree[e].forEach(i=>{let s=this.workerLargestY(i);s.y>t.y&&(t=s)}),t}return this.drawing[e]}calculateHeight(e,t){e in this.containment.outDegree?this.containment.outDegree[e].forEach(i=>{this.calculateHeight(i,t+1)}):t>this.recursionSteps&&(this.recursionSteps=t)}}class nt extends Q{constructor(e,t,i,s){super(e,i,s),this.class=S.Containment;let r=new O(e);this.calculateParameter();let n=t.containment,a=e.verticesBM;a=new k(e,n,a).slots,this.initializeHighlights(e,this.highlightedEdge),this.containment=t,this.drawBiomarkers(a),this.drawCellTypes(n),this.graph.verticesCT.length!=this.graph.vertices.length&&(this.clipBM(a),this.drawCellTypes(n)),new st(e,n);const h=this.calculateCTSmallestY(n);this.calculateDynamicOffsetIncrementAS(r,n),new ye(e,new v(e,e.verticesAS),this.drawing,h,this.offsetIncrementAS,this.depthMultiplier),this.applyLinearMap(i,r),0==i.rotateAngle||90==i.rotateAngle?(this.containmentRects=new it(t,this.drawing,this.offsetIncrementCT),this.rects=this.containmentRects.rectangles,this.adjustmentWorker(this.containment.root,null)):(this.containmentRects=new rt(t,this.drawing,this.offsetIncrementCT,s),this.rects=this.containmentRects.rectangles,this.adjustmentWorker(this.containment.root,null)),this.calculateWidthHeight()}formatLabelTwoLines(e,t){let i=e.vertexLabel[t];if("string"==typeof i){let s=i.split(" "),r="",n="",a=0;return s.forEach(l=>{a>i.length/3?n=n+" "+l:r=r+" "+l,a+=l.length}),n.length>0?[r,n]:[r]}return i}calculateCTSmallestY(e){let t=Number.POSITIVE_INFINITY;return e.forEach(i=>{this.drawing[i].y<t&&i in this.graph.inDegree&&(t=this.drawing[i].y)}),t}calculateCTLargestY(e){let t=Number.NEGATIVE_INFINITY;return e.forEach(i=>{this.drawing[i].y>t&&i in this.graph.inDegree&&(t=this.drawing[i].y)}),t}adjustmentWorker(e,t){if(e in this.containment.outDegree)this.containment.outDegree[e].forEach(i=>{this.adjustmentWorker(i,e)});else if(1==this.containment.outDegree[t].length&&e<=-8e5){let s=this.containmentRects.rectangles[this.containment.artificialIdRectIDMap[t]];this.drawing[e]=new m.S(s.positionX+s.width/2,s.positionY+s.height/2)}}calculateDynamicOffsetIncrementAS(e,t){let i=this.calculateCTLargestY(t)-this.calculateCTSmallestY(t);if(e.leaves.length>0){let s=i/(e.leaves.length-1);s>this.offsetIncrementAS&&(this.offsetIncrementAS=s)}}clipBM(e){if(e.length>1){let t=[e[0]],i=this.graph.inDegree[e[0]][0],s=0;for(let r=1;r<e.length;r++){let n=e[r];n in this.graph.inDegree?this.graph.inDegree[n].includes(i)?t.push(n):(s=this.redrawBM(t,i,s),t=[n],i=this.graph.inDegree[e[r]][0]):this.drawing[n]=new m.S(this.drawing[n].x,this.drawing[e[r-1]]+this.offsetIncrementBM)}this.redrawBM(t,i,s)}}redrawBM(e,t,i){const s=this.drawing[t],r=Math.floor(e.length/2);for(let a=0;a<e.length;a++)this.drawing[e[a]]=new m.S(this.drawing[e[a]].x,a<r?s.y-(a+1)*this.offsetIncrementBM:s.y+(a-r)*this.offsetIncrementBM);let n=s.y-r*this.offsetIncrementBM;if(Math.abs(i-n)<this.offsetIncrementBM||n<i){this.drawing[e[0]]=new m.S(this.drawing[e[0]].x,i+this.offsetIncrementBM);for(let a=1;a<e.length;a++)this.drawing[e[a]]=new m.S(this.drawing[e[a]].x,this.drawing[e[a-1]].y+this.offsetIncrementBM)}return this.drawing[e[e.length-1]].y}spacingCTRectangles(e){let t=new Map;e.forEach(i=>t[i]=!1),this.criticalWorker(this.containment.root,this.containment,t),this.processCriticalCT(e,t)}processCriticalCT(e,t){for(let i=0;i<e.length-1;i++){let s=e[i],r=e[i+1],n=this.drawing[r].y-this.drawing[s].y;t[s]&&n<1.2*this.offsetIncrementCT?this.drawing[r].y=this.drawing[s].y+1.2*this.offsetIncrementCT:n<this.offsetIncrementCT&&(this.drawing[r].y=this.drawing[s].y+this.offsetIncrementCT)}}criticalWorker(e,t,i){if(e in t.outDegree){let s=t.outDegree[e];i[s[s.length-1]]=!0,s.forEach(r=>{this.criticalWorker(r,t,i)})}}drawBiomarkers(e){let t=this.offsetIncrementBM;e.forEach(i=>{let s=new m.S(this.xPositionBM,t);t+=this.offsetIncrementBM,this.drawing[i]=s})}drawCellTypes(e){let t=this.offsetIncrementCT;this.graph.vertices.length!=this.graph.verticesCT.length?new ie(this,e,t):e.forEach(i=>{let s=new m.S(this.xPositionCT,t);t+=this.offsetIncrementCT,this.drawing[i]=s}),this.spacingCTRectangles(e)}}class at{constructor(e,t){this.graph=e,this.treeAS=new v(e,e.verticesAS),this.counter=1,this.graph.verticesCT.forEach(i=>{}),this.CTRectMap=new Map,e.verticesCT.forEach(i=>{this.CTRectMap[i]=this.search(t,i)}),this.artificialBMID=-85e4,this.replicateBM()}search(e,t){let i=null;for(const[s,r]of Object.entries(e.outDegree))r.includes(t)&&(i=s);return i}replicateBM(){this.graph.verticesBM.forEach(e=>{if(e in this.graph.inDegree){let t=new Map;this.graph.inDegree[e].forEach(s=>{let r=this.CTRectMap[s];r in t?t[r].push(s):t[r]=[s]});let i=!0;for(const[s,r]of Object.entries(t))i?i=!1:this.augment(e,r)}})}augment(e,t){this.graph.vertices.push(this.artificialBMID),this.graph.verticesBM.push(this.artificialBMID),this.graph.numVertices+=1,this.graph.numVerticesBM+=1,this.graph.vertexType[this.artificialBMID]=u.BM,this.graph.vertexLabel[this.artificialBMID]=this.graph.vertexLabel[e],this.graph.IDtoOntologyType[this.artificialBMID]=this.graph.IDtoOntologyType[e],this.graph.IDtoOntologyID[this.artificialBMID]=this.graph.IDtoOntologyID[e],this.graph.vertexSize[this.artificialBMID]=this.graph.vertexSize[e],this.graph.vertexVisible[this.artificialBMID]=1,this.graph.vertexColor[this.artificialBMID]=this.graph.vertexColor[e],t.forEach(i=>{this.graph.outDegree[i].push(this.artificialBMID),this.artificialBMID in this.graph.inDegree?this.graph.inDegree[this.artificialBMID].push(i):this.graph.inDegree[this.artificialBMID]=[i]}),t.forEach(i=>{this.removeByValue(i,this.graph.inDegree[e]),this.removeByValue(e,this.graph.outDegree[i])}),this.artificialBMID-=1}removeByValue(e,t){let i=t.indexOf(e);-1!=i&&t.splice(i,1)}}class ot{constructor(e,t,i){this.properties=i,this.artificialID=-8e5,this.containment=e,this.initialize(t)}evaluate(e){this.artificialIDExpanded[this.containment.rectIDArtificialIDMap[e]]?this.collapse(e):this.expand(e);let i=this.generateASTree();i.merge(this.currentBipartite),this.currentGraph=i,this.addASCTEdges()}expandMapUpdate(e){e in this.containment.outDegree&&(this.artificialIDExpanded[e]=!0,this.containment.outDegree[e].forEach(t=>{this.expandMapUpdate(t)}))}expand(e){let t=this.containment.rectIDArtificialIDMap[e],i=this.currentBipartite.vertices.slice(0).filter(r=>r!=this.containment.outDegree[t][0]);this.currentBipartite=new v(this.currentBipartite,i),this.containment.outDegree[t]=this.copyContainmentOutDegree[t].slice(0),this.containment.update();let s=this.containment.involved[t];this.expandCellTypes(s),this.expandBiomarker(s),this.expandMapUpdate(t)}customDelete(e,t){let i=[];for(let s=0;s<e.length;s++){let r=e[s];-1==t.indexOf(r)&&i.push(r)}return i}collapseMapUpdate(e){e in this.copyContainmentOutDegree&&(this.artificialIDExpanded[e]=!1,this.copyContainmentOutDegree[e].forEach(t=>{this.collapseMapUpdate(t)}))}collapse(e){let t=this.containment.rectIDArtificialIDMap[e];this.collapseWorker(t),this.containment.update(),this.collapseMapUpdate(t);let i=this.containment.involved[t].slice(0),s=[];i.forEach(n=>{n in this.currentBipartite.outDegree&&this.currentBipartite.outDegree[n].forEach(a=>{s.push(a)})});let r=this.currentBipartite.vertices.slice(0).filter(n=>!i.includes(n)&&!s.includes(n));this.currentBipartite=new v(this.currentBipartite,r),this.collapseAddBlackVertex(i),this.containment.outDegree[t]=[this.artificialID],this.artificialID-=1,this.containment.update()}collapseWorker(e){e in this.containment.outDegree&&this.containment.outDegree[e].forEach(t=>{if(t in this.containment.artificialIdRectIDMap){let i=this.containment.artificialIdRectIDMap[t];!this.artificialIDExpanded[t]&&t in this.containment.outDegree?this.expand(i):this.collapseWorker(t)}})}addASCTEdges(){this.currentBipartite.verticesCT.forEach(e=>{e in this.initialGraph.inDegree&&this.initialGraph.inDegree[e].forEach(t=>{t in this.currentGraph.outDegree?this.currentGraph.outDegree[t].push(e):this.currentGraph.outDegree[t]=[e],e in this.currentGraph.inDegree?this.currentGraph.inDegree[e].push(t):this.currentGraph.inDegree[e]=[t]})})}generateASTree(){let e=this.reachableLeaves(),t=new Map;this.initialAS.vertices.forEach(s=>t[s]=!1),e.forEach(s=>{this.reachableASTree(s,t)});let i=[];return this.initialAS.vertices.forEach(s=>{t[s]&&i.push(s)}),new v(this.initialAS,i)}reachableASTree(e,t){if(t[e]=!0,e in this.initialAS.inDegree){let s=this.initialAS.inDegree[e][0];t[s]||this.reachableASTree(s,t)}}reachableLeaves(){let e=[];return this.currentBipartite.verticesCT.forEach(t=>{t in this.initialGraph.inDegree&&this.initialGraph.inDegree[t].forEach(i=>e.push(i))}),e}expandBiomarker(e){e.forEach(t=>{t in this.initialGraph.outDegree&&this.initialGraph.outDegree[t].forEach(i=>{this.currentBipartite.vertices.includes(i)||this.currentBipartite.addVertex(u.BM,i,this.initialGraph.vertexColor[i],1,this.properties.vertexSize,this.initialGraph.vertexLabel[i]),i in this.currentBipartite.inDegree?this.currentBipartite.inDegree[i].push(t):this.currentBipartite.inDegree[i]=[t]})})}expandCellTypes(e){e.forEach(t=>{this.currentBipartite.addVertex(u.CT,t,this.initialGraph.vertexColor[t],1,this.properties.vertexSize,this.initialGraph.vertexLabel[t]),t in this.initialGraph.outDegree&&(this.currentBipartite.outDegree[t]=this.initialGraph.outDegree[t].slice(0)),t in this.initialGraph.inDegree&&(this.currentBipartite.inDegree[t]=this.initialGraph.inDegree[t].slice(0))})}reset(){this.containment.outDegree=new Map,Object.keys(this.copyContainmentOutDegree).forEach(e=>{this.containment.outDegree[e]=this.copyContainmentOutDegree[e].slice(0)}),this.containment.update()}initializeContainmentStructures(){this.artificialIDExpanded=new Map,this.copyContainmentOutDegree=new Map,Object.keys(this.containment.outDegree).forEach(e=>{this.copyContainmentOutDegree[e]=this.containment.outDegree[e].slice(0),this.artificialIDExpanded[e]=!0})}calculateInitialInduceSet(e,t){let i=[];return t.verticesAS.forEach(s=>i.push(s)),this.containment.containment.forEach(s=>i.push(s)),e.forEach(s=>i.push(s)),i}initializeGraphs(e){let t=new Set;this.containment.containment.forEach(l=>{l in e.outDegree&&e.outDegree[l].forEach(c=>{t.add(c)})});let i=Array.from(t),s=this.calculateInitialInduceSet(i,e);this.initialGraph=new v(e,s),new $(this.initialGraph);let n=new Z(this.initialGraph);this.depth=n.depth,new at(this.initialGraph,this.containment),this.initialAS=new v(this.initialGraph,this.initialGraph.verticesAS),this.currentBipartite=new v(this.initialGraph,this.containment.containment.concat(this.initialGraph.verticesBM))}initialize(e){this.initializeContainmentStructures(),this.initializeGraphs(e);let t=this.generateASTree();t.merge(this.currentBipartite),this.currentGraph=t,this.addASCTEdges()}collapseAddBlackVertex(e){let t=0;e.forEach(n=>{n in this.initialGraph.outDegree&&(t+=this.initialGraph.outDegree[n].length)});let i=this.properties.maxContainmentCollapsedVertexSize,s=this.properties.vertexSize;s+=t>12?i:t*(i/12),this.currentBipartite.addVertex(u.CT,this.artificialID,"black",1,s,""+t)}}class lt{constructor(e,t){this.containment=e,this.graph=t,this.heuristicContainment=new Map,this.asTreeLeafIndex=new Map,this.generateLeafIndex(),this.generateHeuristic(this.containment.root),this.reorder(this.containment.root),this.containment.update()}generateLeafIndex(){let e=new O(this.graph);for(let t=0;t<e.leaves.length;t++)this.asTreeLeafIndex[e.leaves[t]]=t+1}calculateMedian(e){return 1==e.length?e[0]:0==e.length?0:(e.sort((i,s)=>i-s),e[Math.floor(e.length/2)])}generateHeuristic(e){if(e in this.containment.outDegree){let t=0;this.containment.outDegree[e].forEach(i=>{this.generateHeuristic(i),t+=this.heuristicContainment[i]}),this.heuristicContainment[e]=t}else if(e in this.graph.inDegree){let t=[];this.graph.inDegree[e].forEach(i=>{t.push(this.asTreeLeafIndex[i])}),this.heuristicContainment[e]=this.calculateMedian(t)}else this.heuristicContainment[e]=0}reorder(e){e in this.containment.outDegree&&(this.containment.outDegree[e].forEach(t=>{this.reorder(t)}),this.containment.outDegree[e].sort((t,i)=>this.heuristicContainment[t]-this.heuristicContainment[i]))}}class ht{constructor(e,t,i){this.properties=i,this.artificialID=-8e5,this.containment=e,this.initialize(t)}evaluate(e){this.artificialIDExpanded[this.containment.rectIDArtificialIDMap[e]]?this.collapse(e):this.expand(e);let i=this.generateASTree();i.merge(this.currentBipartite),this.currentGraph=i,this.addASCTEdges()}expandMapUpdate(e){e in this.containment.outDegree&&(this.artificialIDExpanded[e]=!0,this.containment.outDegree[e].forEach(t=>{this.expandMapUpdate(t)}))}expand(e){let t=this.containment.rectIDArtificialIDMap[e],i=this.currentBipartite.vertices.slice(0).filter(r=>r!=this.containment.outDegree[t][0]);this.currentBipartite=new v(this.currentBipartite,i),this.containment.outDegree[t]=this.copyContainmentOutDegree[t].slice(0),this.containment.update(),this.expandCellTypes(this.containment.involved[t]),this.expandMapUpdate(t)}customDelete(e,t){let i=[];for(let s=0;s<e.length;s++){let r=e[s];-1==t.indexOf(r)&&i.push(r)}return i}collapseMapUpdate(e){e in this.copyContainmentOutDegree&&(this.artificialIDExpanded[e]=!1,this.copyContainmentOutDegree[e].forEach(t=>{this.collapseMapUpdate(t)}))}collapse(e){let t=this.containment.rectIDArtificialIDMap[e];this.collapseWorker(t),this.containment.update(),this.collapseMapUpdate(t);let i=this.containment.involved[t].slice(0),s=this.currentBipartite.vertices.slice(0).filter(r=>!i.includes(r));this.currentBipartite=new v(this.currentBipartite,s),this.collapseAddBlackVertex(i),this.containment.outDegree[t]=[this.artificialID],this.artificialID-=1,this.containment.update()}collapseWorker(e){e in this.containment.outDegree&&this.containment.outDegree[e].forEach(t=>{if(t in this.containment.artificialIdRectIDMap){let i=this.containment.artificialIdRectIDMap[t];!this.artificialIDExpanded[t]&&t in this.containment.outDegree?this.expand(i):this.collapseWorker(t)}})}addASCTEdges(){this.currentBipartite.verticesCT.forEach(e=>{e in this.initialGraph.inDegree&&this.initialGraph.inDegree[e].forEach(t=>{t in this.currentGraph.outDegree?this.currentGraph.outDegree[t].push(e):this.currentGraph.outDegree[t]=[e],e in this.currentGraph.inDegree?this.currentGraph.inDegree[e].push(t):this.currentGraph.inDegree[e]=[t]})})}generateASTree(){let e=this.reachableLeaves(),t=new Map;this.initialAS.vertices.forEach(s=>t[s]=!1),e.forEach(s=>{this.reachableASTree(s,t)});let i=[];return this.initialAS.vertices.forEach(s=>{t[s]&&i.push(s)}),new v(this.initialAS,i)}reachableASTree(e,t){if(t[e]=!0,e in this.initialAS.inDegree){let s=this.initialAS.inDegree[e][0];t[s]||this.reachableASTree(s,t)}}reachableLeaves(){let e=[];return this.currentBipartite.verticesCT.forEach(t=>{t in this.initialGraph.inDegree&&this.initialGraph.inDegree[t].forEach(i=>e.push(i))}),e}expandCellTypes(e){e.forEach(t=>{this.currentBipartite.addVertex(u.CT,t,this.initialGraph.vertexColor[t],1,this.properties.vertexSize,this.initialGraph.vertexLabel[t]),t in this.initialGraph.outDegree&&(this.currentBipartite.outDegree[t]=this.initialGraph.outDegree[t].slice(0)),t in this.initialGraph.inDegree&&(this.currentBipartite.inDegree[t]=this.initialGraph.inDegree[t].slice(0))})}reset(){this.containment.outDegree=new Map,Object.keys(this.copyContainmentOutDegree).forEach(e=>{this.containment.outDegree[e]=this.copyContainmentOutDegree[e].slice(0)}),this.containment.update()}initializeContainmentStructures(){this.copyContainmentOutDegree=new Map,this.artificialIDExpanded=new Map,Object.keys(this.containment.outDegree).forEach(e=>{this.artificialIDExpanded[e]=!0,this.copyContainmentOutDegree[e]=this.containment.outDegree[e].slice(0)})}calculateInitialInduceSet(e){let t=[];return e.verticesAS.forEach(i=>t.push(i)),this.containment.containment.forEach(i=>t.push(i)),t}initializeGraphs(e){let t=this.calculateInitialInduceSet(e);this.initialGraph=new v(e,t),new $(this.initialGraph);let s=new Z(this.initialGraph);this.depth=s.depth,this.initialAS=new v(this.initialGraph,this.initialGraph.verticesAS),this.currentBipartite=new v(this.initialGraph,this.containment.containment.slice(0))}initialize(e){this.initializeContainmentStructures(),this.initializeGraphs(e);let t=this.generateASTree();t.merge(this.currentBipartite),this.currentGraph=t,this.addASCTEdges()}countExpansion(e){if(this.expansionlabel[e])return 0;if(this.expansionlabel[e]=!0,e in this.initialAS.inDegree){let t=1;return e<0&&(t-=1),t+this.countExpansion(this.initialAS.inDegree[e][0])}return 1}collapseAddBlackVertex(e){this.expansionlabel=new Map,this.initialAS.verticesAS.forEach(n=>this.expansionlabel[n]=!1);let t=0;e.forEach(n=>{n in this.initialGraph.inDegree&&this.initialGraph.inDegree[n].forEach(a=>{t+=this.countExpansion(a)})});let i=this.properties.maxContainmentCollapsedVertexSize,s=this.properties.vertexSize;s+=t>12?i:t*(i/12),this.currentBipartite.addVertex(u.CT,this.artificialID,"black",1,s,""+t)}}class we extends j{constructor(e,t){super(e,"Containment"),this.frames=25,this.frameTime=700,this.controller=e,this.hideBM=t}renderRestoreGraphContext(){return this.currentView=null,this.render(null)}renderRestoreViewContext(){this.firstTime=!1,this.render(null).then()}render(e){let t=this.controller.graphs[this.controller.currentOrgan];return t.ready?this.renderSubgraph(t):Promise.reject()}animationTick(e,t,i,s,r){if(e==t.animation.length-1){i.graphStyle.labelEnabled=this.controller.gui.appearance[0].sel;let n=i.exportSpecification(!1),a=new b.G7x(b.Qc3(n)).renderer("svg").initialize(document.querySelector("#drawing")).addEventListener("click",(l,c)=>this.calculateContainer(l,c,r)).addEventListener("mouseover",(l,c)=>this.toolTip.compute(l,c,s));return this.setBackground(this.currentView),this.updateView(a,this.currentView),this.currentView=a,this.currentView.runAsync()}{i.graphStyle.labelEnabled=!1;let n=i.exportSpecification(!1),a=new b.G7x(b.Qc3(n)).renderer("svg").initialize(document.querySelector("#drawing"));return this.setBackground(a),this.updateView(a,this.currentView),this.currentView=a,a.runAsync()}}renderSubgraph(e){this.firstTime&&this.firstTimeProcessing(e);let i=new nt(this.containmentGraph,this.manager.containment,new N(this.controller.gui.selectedRotation),this.controller.properties),s=new X(this.containmentGraph,i,this.controller.properties);if(this.setGraph2DParameter(s),null!=this.currentView){let r=this.calculateVertices2Move(i.drawing),n=new se(i.drawing,this.calculateSourcePoints(r),r,this.calculateTargetPoints(r,i.drawing),this.frames),a=[];for(let l=0;l<this.frames;l++)setTimeout(()=>{s.vertexPosition=n.animation[l],a.push(this.animationTick(l,n,s,e,i))},this.frameTime);return Promise.all(a).then(()=>{this.firstTime=!1,this.previousDrawing=i.drawing}).then()}{let r=s.exportSpecification(!1),n=new b.G7x(b.Qc3(r)).renderer("svg").initialize(document.querySelector("#drawing")).addEventListener("click",(a,l)=>this.calculateContainer(a,l,i)).addEventListener("mouseover",(a,l)=>this.toolTip.compute(a,l,e));return this.currentView=n,this.setBackground(this.currentView),this.currentView.runAsync().then(()=>{this.firstTime=!1,this.previousDrawing=i.drawing}).then()}}calculateSourcePoints(e){let t=[];return e.forEach(i=>t.push(this.previousDrawing[i])),t}calculateTargetPoints(e,t){let i=[];return e.forEach(s=>i.push(t[s])),i}calculateVertices2Move(e){let t=[];return this.containmentGraph.verticesCT.forEach(i=>{i in this.previousDrawing&&i in e&&(this.previousDrawing[i].x!=e[i].x||this.previousDrawing[i].y!=e[i].y)&&t.push(i)}),this.containmentGraph.verticesBM.forEach(i=>{i in this.previousDrawing&&i in e&&(this.previousDrawing[i].x!=e[i].x||this.previousDrawing[i].y!=e[i].y)&&t.push(i)}),t}calculateContainer(e,t,i){if(null!=t&&null!=e&&"rect"==t.mark.marktype){let s=this.calculateRectIndex(e,i.rects);null!=s&&(this.manager.evaluate(s),this.containmentGraph=this.manager.currentGraph,this.render(null))}}calculateRectIndex(e,t){let i=e.originalTarget.__data__.datum,s=new ne.A(i.x,i.y,i.w,i.h),r=null;for(let n=0;n<t.length;n++)if(t[n].positionX==s.positionX&&t[n].positionY==s.positionY){r=n;break}return r}firstTimeProcessing(e){let t=this.fetchContainmentIndex(),i=this.controller.graphs[this.controller.currentOrgan].containment;i.root=-1==t?i.initialRoot:i.outDegree[i.initialRoot][t-1],i.update(),this.manager=this.hideBM?new ht(i,e,this.controller.properties):new ot(i,e,this.controller.properties),new lt(this.manager.containment,this.manager.currentGraph),this.containmentGraph=this.manager.currentGraph}fetchContainmentIndex(){let e=this.controller.gui.selectedContainer;if("All Container"==e)return-1;{let t=e.split("Container ");return parseInt(t[1])}}reset(){this.firstTime=!0,null!=this.manager&&this.manager.reset(),this.currentView=null}}class ct extends Q{constructor(e,t,i){super(e,t,i),this.class=S.Subgraph,this.calculateParameter(),this.drawBiomarkers(this.graph.verticesBM),this.drawCellTypes(this.graph.verticesCT),new ye(e,new v(e,e.verticesAS),this.drawing,this.offsetIncrementAS,this.offsetIncrementAS,this.depthMultiplier),this.calculateWidthHeight(),this.applyLinearMap(t,new O(e))}drawBiomarkers(e){let t=this.properties.heightTopPadding;e.forEach(i=>{let s=new m.S(this.xPositionBM,t);t+=this.offsetIncrementBM,this.drawing[i]=s})}drawCellTypes(e){let t=this.properties.heightTopPadding;e.forEach(i=>{let s=new m.S(this.xPositionCT,t);t+=this.offsetIncrementCT,this.drawing[i]=s})}}class ut extends j{constructor(e){super(e,"Original")}renderRestoreGraphContext(){return this.firstTime=!0,this.render(null)}renderRestoreViewContext(){this.firstTime=!1,this.render(null)}render(e){let t=this.controller.graphs[this.controller.currentOrgan];if(t.ready){let i=this.controller.gui.selectedRotation,r=(new v(t,t.vertices),new ct(t,new N(i),this.controller.properties)),n=new X(t,r,this.controller.properties);this.setGraph2DParameter(n);let a=n.exportSpecification(!1),l=new b.G7x(b.Qc3(a)).renderer("svg").initialize(document.querySelector("#drawing")).addEventListener("mouseover",(c,h)=>this.toolTip.compute(c,h,t));return this.firstTime||this.updateView(l,this.currentView),this.currentView=l,this.setBackground(this.currentView),this.currentView.runAsync().then(()=>this.firstTime=!1).then()}return null}reset(){this.firstTime=!0,this.currentView=null}}class pt{constructor(e){this.initializeGraphs(),this.gui=e,this.currentOrgan=p.Kidney,this.properties=new Y,this.currentMode=new ve(this)}initializeGraphs(){this.graphs=[new x([p.BoneMarrow]),new x([p.Brain]),new x([p.Heart]),new x([p.Kidney]),new x([p.LargeIntestine]),new x([p.Lung]),new x([p.LymphNodes]),new x([p.Skin]),new x([p.Spleen]),new x([p.Thymus]),new x([p.Vasculature])]}updateMode(e){null!=this.currentMode&&this.currentMode.reset(),"Partial Graph"==e?this.currentMode=new Ze(this):"Complete Graph"==e?this.currentMode=new ve(this):"Exploration"==e?this.currentMode=new tt(this):"Containment"==e?this.currentMode=new we(this,!this.gui.modes[0].sel):"Unmodified Graph"==e&&(this.currentMode=new ut(this))}updateOrgan(e){this.currentOrgan=function(o){switch(o){case"Bone Marrow":return p.BoneMarrow;case"Brain":return p.Brain;case"Heart":return p.Heart;case"HeartWithCTTypology":return p.HeartWithCTTypology;case"Kidney":return p.Kidney;case"Large Intestine":return p.LargeIntestine;case"Lung":return p.Lung;case"Lymph Nodes":return p.LymphNodes;case"Skin":return p.Skin;case"Spleen":return p.Spleen;case"Thymus":return p.Thymus;case"Vasculature":return p.Vasculature;case"All":return p.All;default:return null}}(e),this.currentMode.reset()}renderRestore(){this.currentMode.renderRestoreViewContext()}render(){return this.currentMode.render(null)}}}}]);